// Generated by Haxe 4.3.7
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	matched(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
}
EReg.__name__ = true;
class HxOverrides {
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = true;
Math.__name__ = true;
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			return null;
		}
	}
	static fields(o) {
		let a = [];
		if(o != null) {
			let hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
}
Reflect.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		let v = parseInt(x);
		if(isNaN(v)) {
			return null;
		}
		return v;
	}
}
Std.__name__ = true;
class StringTools {
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
}
StringTools.__name__ = true;
class Sys {
	static systemName() {
		let _g = process.platform;
		switch(_g) {
		case "darwin":
			return "Mac";
		case "freebsd":
			return "BSD";
		case "linux":
			return "Linux";
		case "win32":
			return "Windows";
		default:
			return _g;
		}
	}
}
Sys.__name__ = true;
class haxe_io_Output {
	writeByte(c) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	writeBytes(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		let b = s.b;
		let k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	flush() {
	}
	write(s) {
		let l = s.length;
		let p = 0;
		while(l > 0) {
			let k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	writeFullBytes(s,pos,len) {
		while(len > 0) {
			let k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	writeUInt16(x) {
		if(x < 0 || x >= 65536) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	writeInt32(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	writeString(s,encoding) {
		let b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
}
haxe_io_Output.__name__ = true;
class _$Sys_FileOutput extends haxe_io_Output {
	constructor(fd) {
		super();
		this.fd = fd;
	}
	writeByte(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	writeBytes(s,pos,len) {
		let data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	writeString(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	flush() {
		js_node_Fs.fsyncSync(this.fd);
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
}
_$Sys_FileOutput.__name__ = true;
class haxe_io_Input {
	readByte() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	readBytes(s,pos,len) {
		let k = len;
		let b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	readFullBytes(s,pos,len) {
		while(len > 0) {
			let k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	read(nbytes) {
		let s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		let p = 0;
		while(nbytes > 0) {
			let k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	readInt16() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		let n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	readUInt16() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	readInt32() {
		let ch1 = this.readByte();
		let ch2 = this.readByte();
		let ch3 = this.readByte();
		let ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	readString(len,encoding) {
		let b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
}
haxe_io_Input.__name__ = true;
class _$Sys_FileInput extends haxe_io_Input {
	constructor(fd) {
		super();
		this.fd = fd;
	}
	readByte() {
		let buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
			}
		}
		return buf[0];
	}
	readBytes(s,pos,len) {
		let data = s.b;
		let buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
			}
		}
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
}
_$Sys_FileInput.__name__ = true;
var Vscode = require("vscode");
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	toString() {
		return this.get_message();
	}
	get_message() {
		return this.message;
	}
	get_native() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
haxe_Exception.__name__ = true;
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
haxe_ValueException.__name__ = true;
class haxe_crypto_Adler32 {
	constructor() {
		this.a1 = 1;
		this.a2 = 0;
	}
	update(b,pos,len) {
		let a1 = this.a1;
		let a2 = this.a2;
		let _g = pos;
		let _g1 = pos + len;
		while(_g < _g1) {
			a1 = (a1 + b.b[_g++]) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	equals(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	static read(i) {
		let a = new haxe_crypto_Adler32();
		let a2a = i.readByte();
		let a2b = i.readByte();
		a.a1 = i.readByte() << 8 | i.readByte();
		a.a2 = a2a << 8 | a2b;
		return a;
	}
}
haxe_crypto_Adler32.__name__ = true;
class haxe_crypto_Crc32 {
	static make(data) {
		let c_crc = -1;
		let len = data.length;
		let b = data.b.bufferValue;
		let _g = 0;
		while(_g < len) {
			let tmp = (c_crc ^ b.bytes[_g++]) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
		}
		return c_crc ^ -1;
	}
}
haxe_crypto_Crc32.__name__ = true;
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
}
haxe_ds_IntMap.__name__ = true;
class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	add(item) {
		let x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	push(item) {
		let x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	first() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	filter(f) {
		let l2 = new haxe_ds_List();
		let l = this.h;
		while(l != null) {
			let v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
}
haxe_ds_List.__name__ = true;
class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
haxe_ds__$List_ListNode.__name__ = true;
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
}
haxe_ds_StringMap.__name__ = true;
class haxe_exceptions_PosException extends haxe_Exception {
	constructor(message,previous,pos) {
		super(message,previous);
		if(pos == null) {
			this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
		} else {
			this.posInfos = pos;
		}
	}
	toString() {
		return "" + super.toString() + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
}
haxe_exceptions_PosException.__name__ = true;
class haxe_exceptions_NotImplementedException extends haxe_exceptions_PosException {
	constructor(message,previous,pos) {
		if(message == null) {
			message = "Not implemented";
		}
		super(message,previous,pos);
	}
}
haxe_exceptions_NotImplementedException.__name__ = true;
class haxe_http_HttpBase {
	constructor(url) {
		this.url = url;
		this.headers = [];
		this.params = [];
		this.emptyOnData = $bind(this,this.onData);
	}
	onData(data) {
	}
	onBytes(data) {
	}
	onError(msg) {
	}
	onStatus(status) {
	}
	hasOnData() {
		return $bind(this,this.onData) != this.emptyOnData;
	}
	success(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	get_responseData() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
}
haxe_http_HttpBase.__name__ = true;
class haxe_http_HttpNodeJs extends haxe_http_HttpBase {
	constructor(url) {
		super(url);
	}
	request(post) {
		this.responseAsString = null;
		this.responseBytes = null;
		this.responseHeaders = null;
		let parsedUrl = new js_node_url_URL(this.url);
		let secure = parsedUrl.protocol == "https:";
		let host = parsedUrl.hostname;
		let path = parsedUrl.pathname;
		let port = parsedUrl.port != null ? Std.parseInt(parsedUrl.port) : secure ? 443 : 80;
		let h = { };
		let _g = 0;
		let _g1 = this.headers;
		while(_g < _g1.length) {
			let i = _g1[_g];
			++_g;
			let arr = Reflect.field(h,i.name);
			if(arr == null) {
				arr = [];
				h[i.name] = arr;
			}
			arr.push(i.value);
		}
		if(this.postData != null || this.postBytes != null) {
			post = true;
		}
		let uri = null;
		let _g2 = 0;
		let _g3 = this.params;
		while(_g2 < _g3.length) {
			let p = _g3[_g2];
			++_g2;
			if(uri == null) {
				uri = "";
			} else {
				uri += "&";
			}
			let s = p.name;
			let uri1 = encodeURIComponent(s) + "=";
			let s1 = p.value;
			uri += uri1 + encodeURIComponent(s1);
		}
		let question = path.split("?").length <= 1;
		if(uri != null) {
			path += (question ? "?" : "&") + uri;
		}
		let opts = { protocol : parsedUrl.protocol, hostname : host, port : port, method : post ? "POST" : "GET", path : path, headers : h};
		let _gthis = this;
		let httpResponse = function(res) {
			res.setEncoding("binary");
			let s = res.statusCode;
			if(s != null) {
				_gthis.onStatus(s);
			}
			let data = [];
			res.on("data",function(chunk) {
				data.push(js_node_buffer_Buffer.from(chunk,"binary"));
			});
			res.on("end",function(_) {
				let buf = data.length == 1 ? data[0] : js_node_buffer_Buffer.concat(data);
				let httpResponse = buf.buffer.slice(buf.byteOffset,buf.byteOffset + buf.byteLength);
				_gthis.responseBytes = haxe_io_Bytes.ofData(httpResponse);
				_gthis.req = null;
				_gthis.responseHeaders = new haxe_ds_StringMap();
				let _g = 0;
				let _g1 = Reflect.fields(res.headers);
				while(_g < _g1.length) {
					let field = _g1[_g];
					++_g;
					_gthis.responseHeaders.h[field] = Reflect.field(res.headers,field);
				}
				if(s != null && s >= 200 && s < 400) {
					_gthis.success(_gthis.responseBytes);
				} else {
					_gthis.onError("Http Error #" + s);
				}
			});
		};
		this.req = secure ? js_node_Https.request(opts,httpResponse) : js_node_Http.request(opts,httpResponse);
		if(post) {
			if(this.postData != null) {
				this.req.write(this.postData);
			} else if(this.postBytes != null) {
				this.req.setHeader("Content-Length","" + this.postBytes.length);
				this.req.write(js_node_buffer_Buffer.from(this.postBytes.b.bufferValue));
			}
		}
		this.req.end();
	}
}
haxe_http_HttpNodeJs.__name__ = true;
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
	blit(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	getString(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		let s = "";
		let b = this.b;
		let i = pos;
		let max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				let c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					let code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					let code = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else {
					let u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				let c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	toString() {
		return this.getString(0,this.length);
	}
	static ofString(s,encoding) {
		if(encoding == haxe_io_Encoding.RawNative) {
			let buf = new Uint8Array(s.length << 1);
			let _g = 0;
			let _g1 = s.length;
			while(_g < _g1) {
				let i = _g++;
				let c = s.charCodeAt(i);
				buf[i << 1] = c & 255;
				buf[i << 1 | 1] = c >> 8;
			}
			return new haxe_io_Bytes(buf.buffer);
		}
		let a = [];
		let i = 0;
		while(i < s.length) {
			let c = s.charCodeAt(i++);
			if(55296 <= c && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
			}
			if(c <= 127) {
				a.push(c);
			} else if(c <= 2047) {
				a.push(192 | c >> 6);
				a.push(128 | c & 63);
			} else if(c <= 65535) {
				a.push(224 | c >> 12);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			} else {
				a.push(240 | c >> 18);
				a.push(128 | c >> 12 & 63);
				a.push(128 | c >> 6 & 63);
				a.push(128 | c & 63);
			}
		}
		return new haxe_io_Bytes(new Uint8Array(a).buffer);
	}
	static ofData(b) {
		let hb = b.hxBytes;
		if(hb != null) {
			return hb;
		}
		return new haxe_io_Bytes(b);
	}
}
haxe_io_Bytes.__name__ = true;
class haxe_io_BytesBuffer {
	constructor() {
		this.pos = 0;
		this.size = 0;
	}
	addByte(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	add(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		let sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	addBytes(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		let sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	grow(delta) {
		let req = this.pos + delta;
		let nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		let nbuf = new ArrayBuffer(nsize);
		let nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	getBytes() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		let b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
}
haxe_io_BytesBuffer.__name__ = true;
class haxe_io_BytesOutput extends haxe_io_Output {
	constructor() {
		super();
		this.b = new haxe_io_BytesBuffer();
	}
	writeByte(c) {
		this.b.addByte(c);
	}
	writeBytes(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	getBytes() {
		return this.b.getBytes();
	}
}
haxe_io_BytesOutput.__name__ = true;
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
class haxe_io_Eof {
	constructor() {
	}
	toString() {
		return "Eof";
	}
}
haxe_io_Eof.__name__ = true;
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
class haxe_io_Path {
	constructor(path) {
		switch(path) {
		case ".":case "..":
			this.dir = path;
			this.file = "";
			return;
		}
		let c1 = path.lastIndexOf("/");
		let c2 = path.lastIndexOf("\\");
		if(c1 < c2) {
			this.dir = HxOverrides.substr(path,0,c2);
			path = HxOverrides.substr(path,c2 + 1,null);
			this.backslash = true;
		} else if(c2 < c1) {
			this.dir = HxOverrides.substr(path,0,c1);
			path = HxOverrides.substr(path,c1 + 1,null);
		} else {
			this.dir = null;
		}
		let cp = path.lastIndexOf(".");
		if(cp != -1) {
			this.ext = HxOverrides.substr(path,cp + 1,null);
			this.file = HxOverrides.substr(path,0,cp);
		} else {
			this.ext = null;
			this.file = path;
		}
	}
	toString() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	static withoutDirectory(path) {
		let s = new haxe_io_Path(path);
		s.dir = null;
		return s.toString();
	}
	static directory(path) {
		let s = new haxe_io_Path(path);
		if(s.dir == null) {
			return "";
		}
		return s.dir;
	}
	static join(paths) {
		let _g = [];
		let _g1 = 0;
		while(_g1 < paths.length) {
			let v = paths[_g1];
			++_g1;
			if(v != null && v != "") {
				_g.push(v);
			}
		}
		if(_g.length == 0) {
			return "";
		}
		let path = _g[0];
		let _g2 = 1;
		let _g3 = _g.length;
		while(_g2 < _g3) {
			path = haxe_io_Path.addTrailingSlash(path);
			path += _g[_g2++];
		}
		return haxe_io_Path.normalize(path);
	}
	static normalize(path) {
		let slash = "/";
		path = path.split("\\").join(slash);
		if(path == slash) {
			return slash;
		}
		let target = [];
		let _g = 0;
		let _g1 = path.split(slash);
		while(_g < _g1.length) {
			let token = _g1[_g];
			++_g;
			if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
				target.pop();
			} else if(token == "") {
				if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
					target.push(token);
				}
			} else if(token != ".") {
				target.push(token);
			}
		}
		let acc_b = "";
		let colon = false;
		let slashes = false;
		let _g_offset = 0;
		let _g_s = target.join(slash);
		while(_g_offset < _g_s.length) {
			let s = _g_s;
			let index = _g_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			let c2 = c1;
			switch(c2) {
			case 47:
				if(!colon) {
					slashes = true;
				} else {
					let i = c2;
					colon = false;
					if(slashes) {
						acc_b += "/";
						slashes = false;
					}
					acc_b += String.fromCodePoint(i);
				}
				break;
			case 58:
				acc_b += ":";
				colon = true;
				break;
			default:
				let i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
		}
		return acc_b;
	}
	static addTrailingSlash(path) {
		if(path.length == 0) {
			return "/";
		}
		let c1 = path.lastIndexOf("/");
		let c2 = path.lastIndexOf("\\");
		if(c1 < c2) {
			if(c2 != path.length - 1) {
				return path + "\\";
			} else {
				return path;
			}
		} else if(c1 != path.length - 1) {
			return path + "/";
		} else {
			return path;
		}
	}
}
haxe_io_Path.__name__ = true;
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
class haxe_zip_Compress {
	constructor(level) {
		throw haxe_Exception.thrown("Not implemented for this platform");
	}
	execute(src,srcPos,dst,dstPos) {
		return null;
	}
	setFlushMode(f) {
	}
	close() {
	}
	static run(s,level) {
		let data = s.b;
		let buffer = js_node_Zlib.deflateSync(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),{ level : level});
		return js_node_buffer__$Buffer_Helper.bytesOfBuffer(buffer);
	}
}
haxe_zip_Compress.__name__ = true;
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__:true,__constructs__:null
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_._hx_name="FUnknown",$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_._hx_name="FInfoZipUnicodePath",$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_name:"FUtf8",_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
haxe_zip_ExtraField.__constructs__ = [haxe_zip_ExtraField.FUnknown,haxe_zip_ExtraField.FInfoZipUnicodePath,haxe_zip_ExtraField.FUtf8];
var haxe_zip_FlushMode = $hxEnums["haxe.zip.FlushMode"] = { __ename__:true,__constructs__:null
	,NO: {_hx_name:"NO",_hx_index:0,__enum__:"haxe.zip.FlushMode",toString:$estr}
	,SYNC: {_hx_name:"SYNC",_hx_index:1,__enum__:"haxe.zip.FlushMode",toString:$estr}
	,FULL: {_hx_name:"FULL",_hx_index:2,__enum__:"haxe.zip.FlushMode",toString:$estr}
	,FINISH: {_hx_name:"FINISH",_hx_index:3,__enum__:"haxe.zip.FlushMode",toString:$estr}
	,BLOCK: {_hx_name:"BLOCK",_hx_index:4,__enum__:"haxe.zip.FlushMode",toString:$estr}
};
haxe_zip_FlushMode.__constructs__ = [haxe_zip_FlushMode.NO,haxe_zip_FlushMode.SYNC,haxe_zip_FlushMode.FULL,haxe_zip_FlushMode.FINISH,haxe_zip_FlushMode.BLOCK];
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:true,__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBit",$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBits",$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
class haxe_zip_HuffTools {
	constructor() {
	}
	treeDepth(t) {
		switch(t._hx_index) {
		case 0:
			return 0;
		case 1:
			let da = this.treeDepth(t.left);
			let db = this.treeDepth(t.right);
			return 1 + (da < db ? da : db);
		case 2:
			throw haxe_Exception.thrown("assert");
		}
	}
	treeCompress(t) {
		let d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				return haxe_zip_Huffman.NeedBit(this.treeCompress(t.left),this.treeCompress(t.right));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		let size = 1 << d;
		let table = [];
		let _g = 0;
		while(_g < size) {
			++_g;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	treeWalk(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,t.left);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,t.right);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	treeMake(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		let idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	make(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		let counts = [];
		let tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		let _g = 0;
		while(_g < maxbits) {
			++_g;
			counts.push(0);
			tmp.push(0);
		}
		let _g1 = 0;
		while(_g1 < nlengths) {
			let p = lengths[_g1++ + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		let code = 0;
		let _g2 = 1;
		let _g3 = maxbits - 1;
		while(_g2 < _g3) {
			let i = _g2++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		let bits = new haxe_ds_IntMap();
		let _g4 = 0;
		while(_g4 < nlengths) {
			let i = _g4++;
			let l = lengths[i + pos];
			if(l != 0) {
				let n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
}
haxe_zip_HuffTools.__name__ = true;
class haxe_zip__$InflateImpl_Window {
	constructor(hasCrc) {
		this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos = 0;
		if(hasCrc) {
			this.crc = new haxe_crypto_Adler32();
		}
	}
	slide() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		let b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	addBytes(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	addByte(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	getLastChar() {
		return this.buffer.b[this.pos - 1];
	}
	available() {
		return this.pos;
	}
	checksum() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
}
haxe_zip__$InflateImpl_Window.__name__ = true;
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:true,__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
class haxe_zip_InflateImpl {
	constructor(i,header,crc) {
		if(crc == null) {
			crc = true;
		}
		if(header == null) {
			header = true;
		}
		this.isFinal = false;
		this.htools = new haxe_zip_HuffTools();
		this.huffman = this.buildFixedHuffman();
		this.huffdist = null;
		this.len = 0;
		this.dist = 0;
		this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
		this.input = i;
		this.bits = 0;
		this.nbits = 0;
		this.needed = 0;
		this.output = null;
		this.outpos = 0;
		this.lengths = [];
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.lengths.push(-1);
		this.window = new haxe_zip__$InflateImpl_Window(crc);
	}
	buildFixedHuffman() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		let a = [];
		let _g = 0;
		while(_g < 288) {
			let n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	readBytes(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	getBits(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		let b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	getBit() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		let b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	getRevBits(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	resetBits() {
		this.bits = 0;
		this.nbits = 0;
	}
	addBytes(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	addByte(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	addDistOne(n) {
		let c = this.window.getLastChar();
		let _g = 0;
		while(_g < n) {
			++_g;
			this.addByte(c);
		}
	}
	addDist(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	applyHuffman(h) {
		switch(h._hx_index) {
		case 0:
			return h.i;
		case 1:
			return this.applyHuffman(this.getBit() ? h.right : h.left);
		case 2:
			return this.applyHuffman(h.table[this.getBits(h.n)]);
		}
	}
	inflateLengths(a,max) {
		let i = 0;
		let prev = 0;
		while(i < max) {
			let n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				let end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	inflateLoop() {
		switch(this.state._hx_index) {
		case 0:
			let cmf = this.input.readByte();
			if((cmf & 15) != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			let flg = this.input.readByte();
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if((flg & 32) != 0) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				if(this.input.readUInt16() != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				let r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				let hlit = this.getBits(5) + 257;
				let hdist = this.getBits(5) + 1;
				let hclen = this.getBits(4) + 4;
				let _g = 0;
				while(_g < hclen) this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[_g++]] = this.getBits(3);
				let _g1 = hclen;
				while(_g1 < 19) this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[_g1++]] = 0;
				this.huffman = this.htools.make(this.lengths,0,19,8);
				let lengths = [];
				let _g2 = 0;
				let _g3 = hlit + hdist;
				while(_g2 < _g3) {
					++_g2;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			let n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				let extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				let dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			let rlen = this.len < this.needed ? this.len : this.needed;
			let bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			let calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			if(!calc.equals(haxe_crypto_Adler32.read(this.input))) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				let rdist = this.len < this.dist ? this.len : this.dist;
				let rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			let rlen1 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen1);
			this.len -= rlen1;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
}
haxe_zip_InflateImpl.__name__ = true;
class haxe_zip_Reader {
	constructor(i) {
		this.i = i;
	}
	readZipDate() {
		let t = this.i.readUInt16();
		let d = this.i.readUInt16();
		return new Date((d >> 9) + 1980,(d >> 5 & 15) - 1,d & 31,t >> 11 & 31,t >> 5 & 63,(t & 31) << 1);
	}
	readExtraFields(length) {
		let fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			let tag = this.i.readUInt16();
			let len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				let version = this.i.readByte();
				if(version != 1) {
					let data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					let crc = this.i.readInt32();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(this.i.read(len - 5).toString(),crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	readEntryHeader() {
		let i = this.i;
		let h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		i.readUInt16();
		let flags = i.readUInt16();
		if((flags & 63473) != 0) {
			throw haxe_Exception.thrown("Unsupported flags " + flags);
		}
		let compression = i.readUInt16();
		let compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		let mtime = this.readZipDate();
		let crc32 = i.readInt32();
		let csize = i.readInt32();
		let usize = i.readInt32();
		let fnamelen = i.readInt16();
		let elen = i.readInt16();
		let fname = i.readString(fnamelen);
		let fields = this.readExtraFields(elen);
		if((flags & 2048) != 0) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : null, crc32 : crc32, extraFields : fields};
	}
	read() {
		let l = new haxe_ds_List();
		let tmp = null;
		while(true) {
			let e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.crc32 == null) {
				if(e.compressed) {
					if(tmp == null) {
						tmp = new haxe_io_Bytes(new ArrayBuffer(65536));
					}
					let out = new haxe_io_BytesBuffer();
					let z = new haxe_zip_InflateImpl(this.i,false,false);
					while(true) {
						let n = z.readBytes(tmp,0,65536);
						out.addBytes(tmp,0,n);
						if(n < 65536) {
							break;
						}
					}
					e.data = out.getBytes();
				} else {
					e.data = this.i.read(e.dataSize);
				}
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	static readZip(i) {
		return new haxe_zip_Reader(i).read();
	}
}
haxe_zip_Reader.__name__ = true;
class haxe_zip_Tools {
	static uncompress(f) {
		if(!f.compressed) {
			return;
		}
		let c = new haxe_zip_Uncompress(-15);
		let s = new haxe_io_Bytes(new ArrayBuffer(f.fileSize));
		let r = c.execute(f.data,0,s,0);
		c.close();
		if(!r.done || r.read != f.data.length || r.write != f.fileSize) {
			throw haxe_Exception.thrown("Invalid compressed data for " + f.fileName);
		}
		f.compressed = false;
		f.dataSize = f.fileSize;
		f.data = s;
	}
}
haxe_zip_Tools.__name__ = true;
class haxe_zip_Uncompress {
	constructor(windowBits) {
		this.windowBits = windowBits;
	}
	execute(src,srcPos,dst,dstPos) {
		let data = src.b;
		let src1 = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,src.length).slice(srcPos);
		let data1 = dst.b;
		let dst1 = js_node_buffer_Buffer.from(data1.buffer,data1.byteOffset,dst.length);
		let res = js_node_Zlib.inflateRawSync(src1,{ info : true});
		let engine = res.engine;
		let res1 = res.buffer;
		dst1.set(res1,dstPos);
		return { done : true, read : engine.bytesRead, write : res1.byteLength};
	}
	setFlushMode(f) {
	}
	close() {
	}
	static run(src,bufsize) {
		let data = src.b;
		let buffer = js_node_Zlib.inflateSync(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,src.length),bufsize == null ? { } : { chunkSize : bufsize});
		return js_node_buffer__$Buffer_Helper.bytesOfBuffer(buffer);
	}
}
haxe_zip_Uncompress.__name__ = true;
class haxe_zip_Writer {
	constructor(o) {
		this.o = o;
		this.files = new haxe_ds_List();
	}
	writeZipDate(date) {
		this.o.writeUInt16(date.getHours() << 11 | date.getMinutes() << 5 | date.getSeconds() >> 1);
		this.o.writeUInt16(date.getFullYear() - 1980 << 9 | date.getMonth() + 1 << 5 | date.getDate());
	}
	writeEntryHeader(f) {
		let o = this.o;
		let flags = 0;
		if(f.extraFields != null) {
			let _g_head = f.extraFields.h;
			while(_g_head != null) {
				let val = _g_head.item;
				_g_head = _g_head.next;
				if(val._hx_index == 2) {
					flags |= 2048;
				}
			}
		}
		o.writeInt32(67324752);
		o.writeUInt16(20);
		o.writeUInt16(flags);
		if(f.data == null) {
			f.fileSize = 0;
			f.dataSize = 0;
			f.crc32 = 0;
			f.compressed = false;
			f.data = new haxe_io_Bytes(new ArrayBuffer(0));
		} else {
			if(f.crc32 == null) {
				if(f.compressed) {
					throw haxe_Exception.thrown("CRC32 must be processed before compression");
				}
				f.crc32 = haxe_crypto_Crc32.make(f.data);
			}
			if(!f.compressed) {
				f.fileSize = f.data.length;
			}
			f.dataSize = f.data.length;
		}
		o.writeUInt16(f.compressed ? 8 : 0);
		this.writeZipDate(f.fileTime);
		o.writeInt32(f.crc32);
		o.writeInt32(f.dataSize);
		o.writeInt32(f.fileSize);
		o.writeUInt16(f.fileName.length);
		let e = new haxe_io_BytesOutput();
		if(f.extraFields != null) {
			let _g_head = f.extraFields.h;
			while(_g_head != null) {
				let val = _g_head.item;
				_g_head = _g_head.next;
				switch(val._hx_index) {
				case 0:
					let _g = val.bytes;
					e.writeUInt16(val.tag);
					e.writeUInt16(_g.length);
					e.write(_g);
					break;
				case 1:
					let namebytes = haxe_io_Bytes.ofString(val.name);
					e.writeUInt16(28789);
					e.writeUInt16(namebytes.length + 5);
					e.writeByte(1);
					e.writeInt32(val.crc);
					e.write(namebytes);
					break;
				case 2:
					break;
				}
			}
		}
		let ebytes = e.getBytes();
		o.writeUInt16(ebytes.length);
		o.writeString(f.fileName);
		o.write(ebytes);
		this.files.add({ name : f.fileName, compressed : f.compressed, clen : f.data.length, size : f.fileSize, crc : f.crc32, date : f.fileTime, fields : ebytes});
	}
	write(files) {
		let _g_head = files.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			this.writeEntryHeader(val);
			this.o.writeFullBytes(val.data,0,val.data.length);
		}
		this.writeCDR();
	}
	writeCDR() {
		let cdr_size = 0;
		let cdr_offset = 0;
		let _g_head = this.files.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let namelen = val.name.length;
			let extraFieldsLength = val.fields.length;
			this.o.writeInt32(33639248);
			this.o.writeUInt16(20);
			this.o.writeUInt16(20);
			this.o.writeUInt16(0);
			this.o.writeUInt16(val.compressed ? 8 : 0);
			this.writeZipDate(val.date);
			this.o.writeInt32(val.crc);
			this.o.writeInt32(val.clen);
			this.o.writeInt32(val.size);
			this.o.writeUInt16(namelen);
			this.o.writeUInt16(extraFieldsLength);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeInt32(0);
			this.o.writeInt32(cdr_offset);
			this.o.writeString(val.name);
			this.o.write(val.fields);
			cdr_size += 46 + namelen + extraFieldsLength;
			cdr_offset += 30 + namelen + extraFieldsLength + val.clen;
		}
		this.o.writeInt32(101010256);
		this.o.writeUInt16(0);
		this.o.writeUInt16(0);
		this.o.writeUInt16(this.files.length);
		this.o.writeUInt16(this.files.length);
		this.o.writeInt32(cdr_size);
		this.o.writeInt32(cdr_offset);
		this.o.writeUInt16(0);
	}
}
haxe_zip_Writer.__name__ = true;
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let con = e.__constructs__[o._hx_index];
				let n = con._hx_name;
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true;
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Http = require("http");
var js_node_Https = require("https");
class js_node_KeyValue {
	static get_key(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
var js_node_Path = require("path");
var js_node_Zlib = require("zlib");
var js_node_buffer_Buffer = require("buffer").Buffer;
class js_node_buffer__$Buffer_Helper {
	static bytesOfBuffer(b) {
		let o = Object.create(haxe_io_Bytes.prototype);
		o.length = b.byteLength;
		o.b = b;
		b.bufferValue = b;
		b.hxBytes = o;
		b.bytes = b;
		return o;
	}
}
js_node_buffer__$Buffer_Helper.__name__ = true;
class js_node_stream_WritableNewOptionsAdapter {
	static from(options) {
		if(!Object.prototype.hasOwnProperty.call(options,"final")) {
			Object.defineProperty(options,"final",{ get : function() {
				return options.final_;
			}});
		}
		return options;
	}
}
var js_node_url_URL = require("url").URL;
class js_node_url_URLSearchParamsEntry {
	static _new(name,value) {
		return [name,value];
	}
	static get_name(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
class mikolka_Main {
	static activate(context) {
		Vscode.window.showInformationMessage("Hello from Haxe!");
		mikolka_Main.projectConfig = new mikolka_config_FunkCfg();
		context.subscriptions.push(Vscode.commands.registerCommand("hellohaxe.sayHello",function() {
			Vscode.window.showInformationMessage("Hello from Haxe!");
		}));
		mikolka_vscode_CommandRegistry.registerCommands(context);
		mikolka_vscode_DebuggerSetup.init(context);
	}
}
$hx_exports["activate"] = mikolka_Main.activate;
mikolka_Main.__name__ = true;
class mikolka_commands_CompileTasks {
	static Task_ExportGame(mod_assets,hxc_source,fnfc_assets,export_mod_path) {
		if(!mikolka_helpers_FileManager.isManifestPresent(mod_assets)) {
			mikolka_vscode_Interaction.displayError("Your mod doesn't contain \"_polymod_meta.json\". Please create a valid metadata file for this mod first!");
			return;
		}
		let manifestPath = "" + mod_assets + "/_polymod_meta.json";
		let poly_json = js_node_Fs.readFileSync(manifestPath,{ encoding : "utf8"});
		let varGetter = new EReg("\"mod_version\": *\"([0-9.]+)\" *","i");
		if(!varGetter.match(poly_json)) {
			mikolka_vscode_Interaction.displayError("It seems like your \"_polymod_meta.json\" is missing a \"mod_version\" attribute...");
			return;
		}
		mikolka_vscode_Interaction.requestInput("Type in a name for your exported file (without .zip):",function(userModName) {
			let currentModVersion = varGetter.matched(1);
			Vscode.window.showInputBox({ title : "What version number should be used for this mod version? Leave blank to use the current one", prompt : "replace this!!!", placeHolder : "1.0.0", value : currentModVersion, validateInput : function(input) {
				if(!new EReg("[0-9.]+","i").match(input) && input != "") {
					return "Invalid version string. Use Semacic versioning here!";
				}
				return null;
			}}).then(function(userModVersion) {
				if(userModVersion != "") {
					let new_poly = poly_json.replace(varGetter.r,"\"mod_version\": \"" + userModVersion + "\"");
					js_node_Fs.writeFileSync(manifestPath,new_poly);
					console.log("src/mikolka/commands/CompileTasks.hx:49:","Updated you mod's version to " + userModVersion);
				}
				mikolka_commands_CompileTasks.Task_CompileGame(mod_assets,hxc_source,fnfc_assets,export_mod_path);
				let zip_target = mikolka_helpers_FileManager.getProjectPath("" + userModName + ".zip");
				if(zip_target != null) {
					let out = new sys_io_FileOutput(js_node_Fs.openSync(zip_target,"w"));
					mikolka_helpers_ZipTools.makeZipArchive(export_mod_path,out);
				}
			},function(out) {
				mikolka_vscode_Interaction.displayError("Action canceled!");
			});
		});
	}
	static Task_CompileGame(mod_assets,hxc_source,fnfc_assets,export_mod_path) {
		if(!mikolka_helpers_FileManager.isManifestPresent(mod_assets)) {
			return;
		}
		mikolka_helpers_FileManager.deleteDirRecursively(export_mod_path);
		mikolka_commands_CompileTasks.copyTemplate(mod_assets,export_mod_path);
		let hxc = new mikolka_programs_Hxc(hxc_source,export_mod_path);
		new mikolka_programs_Fnfc(fnfc_assets,export_mod_path).processDirectory();
		hxc.processDirectory();
	}
	static Task_RunGame(game_path) {
		mikolka_vscode_DebuggerSetup.spawnFunkinGame();
	}
	static copyTemplate(mod_assets,export_mod_path) {
		sys_FileSystem.createDirectory(mod_assets);
		mikolka_helpers_FileManager.scanDirectory(mod_assets,function(s) {
			sys_FileSystem.createDirectory(haxe_io_Path.join([export_mod_path,haxe_io_Path.directory(s)]));
			sys_io_File.copy("" + mod_assets + "/" + s,haxe_io_Path.join([export_mod_path,s]));
		},function(s) {
		});
	}
}
mikolka_commands_CompileTasks.__name__ = true;
class mikolka_commands_ProjectTasks {
	static assertTemplateZip(template_url) {
		if(!sys_FileSystem.exists("template.zip")) {
			let client = new haxe_http_HttpNodeJs(template_url);
			client.request();
			if(client.responseBytes == null) {
				return false;
			}
			let bytes = client.responseBytes;
			let data = bytes.b;
			js_node_Fs.writeFileSync("template.zip",js_node_buffer_Buffer.from(data.buffer,data.byteOffset,bytes.length));
		}
		return true;
	}
	static task_setupProject(template_url) {
		mikolka_vscode_Interaction.requestInput("Type in the name of the project:",function(name) {
			mikolka_commands_ProjectTasks.makeProject(template_url,name);
		});
	}
	static makeProject(template_url,name) {
		process.stdout.write("Making project...");
		process.stdout.write("\n");
		if(mikolka_commands_ProjectTasks.assertTemplateZip(template_url)) {
			mikolka_helpers_ZipTools.extractZip(new sys_io_FileInput(js_node_Fs.openSync("template.zip","r")),name);
			sys_io_File.copy(__filename,haxe_io_Path.join([name,"compiler.exe"]));
			sys_io_File.copy("funk.cfg",haxe_io_Path.join([name,"funk.cfg"]));
			if(Sys.systemName() == "Linux") {
				js_node_ChildProcess.spawnSync("chmod +x '" + haxe_io_Path.join([name,"compiler.exe"]) + "'",{ shell : true, stdio : "inherit"});
			}
			process.stdout.write("Done!");
			process.stdout.write("\n");
		} else {
			process.stdout.write("Couldn't find the mod template!");
			process.stdout.write("\n");
		}
	}
}
mikolka_commands_ProjectTasks.__name__ = true;
class mikolka_commands_SetupTask {
	static task_setupEnvironment(template_url) {
		process.stdout.write("[SETUP] Checking git..");
		process.stdout.write("\n");
		if(!mikolka_helpers_Process.checkCommand("git -v")) {
			mikolka_vscode_Interaction.displayError("Git is absent on this system. You can install it from here: https://git-scm.com/");
			return;
		}
		process.stdout.write("[SETUP] Checking haxe..");
		process.stdout.write("\n");
		if(!mikolka_helpers_Process.checkCommand("haxe --version")) {
			mikolka_vscode_Interaction.displayError("You don't have haxe???\nGet it from here: https://haxe.org/download/");
			return;
		}
		process.stdout.write("[SETUP] Checking haxelib..");
		process.stdout.write("\n");
		if(!mikolka_helpers_Process.isPureHaxelib()) {
			mikolka_vscode_Interaction.requestConfirmation("You seem to have non-empty, or absent dependencies folder.\n" + "You can reinstall existing dependencies, or keep them as is.\n" + "Do you want to reinstall? (yes/no): ",function() {
				process.stdout.write("Continuing!");
				process.stdout.write("\n");
				mikolka_commands_SetupTask.installFunkinHaxelibs(template_url);
			},function() {
				mikolka_vscode_Interaction.displayError("Setup aborted!");
			});
		} else {
			mikolka_commands_SetupTask.installFunkinHaxelibs(template_url);
		}
	}
	static installFunkinHaxelibs(template_url) {
		process.stdout.write("[SETUP] Reading dependencies..");
		process.stdout.write("\n");
		mikolka_commands_SetupTask.runSetupCommand("haxelib git thx.core  https://github.com/fponticelli/thx.core.git 2bf2b992e06159510f595554e6b952e47922f128 --never --skip-dependencies");
		mikolka_commands_SetupTask.runSetupCommand("haxelib git hmm  https://github.com/FunkinCrew/hmm.git --never --skip-dependencies");
		mikolka_commands_SetupTask.runSetupCommand("haxelib git grig.audio  https://gitlab.com/haxe-grig/grig.audio.git 57f5d47f2533fd0c3dcd025a86cb86c0dfa0b6d2 --never --skip-dependencies");
		mikolka_commands_SetupTask.runSetupCommand("haxelib git funkin https://github.com/FunkinCompiler/Funkin-lib.git 786e75e63a4529c99f5e0c4d943805610974c48d --always");
		let haxelib_repo = StringTools.replace(mikolka_helpers_Process.resolveCommand("haxelib config"),"\n","");
		process.stdout.write(Std.string("CWD: " + ("" + haxelib_repo + "funkin/git/")));
		process.stdout.write("\n");
		mikolka_commands_SetupTask.localCwd = "" + haxelib_repo + "funkin/git/";
		mikolka_commands_SetupTask.runSetupCommand("haxelib run hmm reinstall");
		process.stdout.write("[SETUP] Moving dependencies..");
		process.stdout.write("\n");
		let _g = 0;
		let _g1 = js_node_Fs.readdirSync("" + haxelib_repo + "funkin/git/.haxelib/");
		while(_g < _g1.length) {
			let dir = _g1[_g];
			++_g;
			try {
				js_node_Fs.renameSync("" + haxelib_repo + "funkin/git/.haxelib/" + dir,"" + haxelib_repo + dir);
			} catch( _g ) {
				console.log("src/mikolka/commands/SetupTask.hx:74:","Move failed: " + haxelib_repo + "funkin/git/.haxelib/" + dir + " -> " + haxelib_repo + dir + "/");
			}
		}
		let grig_dev_file = new sys_io_FileOutput(js_node_Fs.openSync("" + haxelib_repo + ".dev","w"));
		grig_dev_file.writeString("" + haxelib_repo + "grig,audio/git/src");
		grig_dev_file.flush();
		grig_dev_file.close();
		process.stdout.write("[SETUP] Checking mod template..");
		process.stdout.write("\n");
		if(!mikolka_commands_ProjectTasks.assertTemplateZip(template_url)) {
			process.stdout.write("Mod template is missing!");
			process.stdout.write("\n");
		}
		process.stdout.write("[SETUP] Setup done!");
		process.stdout.write("\n");
	}
	static runSetupCommand(cmd) {
		process.stdout.write(Std.string("   > " + cmd));
		process.stdout.write("\n");
		return mikolka_helpers_Process.checkCommand(cmd,mikolka_commands_SetupTask.localCwd,"Setup step failed");
	}
}
mikolka_commands_SetupTask.__name__ = true;
class mikolka_config_FunkCfg {
	constructor(cfg_path) {
		if(cfg_path == null) {
			cfg_path = "funk.cfg";
		}
		this.map = mikolka_config_FunkCfg.loadFile(cfg_path);
	}
	getKey(key) {
		if(!Object.prototype.hasOwnProperty.call(this.map.h,key)) {
			return mikolka_config_FunkCfg.DEFAULT_MAP.h[key];
		}
		return this.map.h[key];
	}
	get_GAME_PATH() {
		return this.getKey("game_path");
	}
	get_GAME_MOD_NAME() {
		return this.getKey("game_mod_name");
	}
	get_MOD_FNFC_FOLDER() {
		return this.getKey("mod_fnfc_folder");
	}
	get_MOD_HX_FOLDER() {
		return this.getKey("mod_hx_folder");
	}
	get_MOD_CONTENT_FOLDER() {
		return this.getKey("mod_content_folder");
	}
	get_TEMPLATE_REMOTE_SRC() {
		return this.getKey("template_remote_src");
	}
	static loadFile(cfg_path) {
		if(!sys_FileSystem.exists(cfg_path)) {
			process.stdout.write("No config! Creating a new one.");
			process.stdout.write("\n");
			mikolka_config_FunkCfg.saveFile(cfg_path,mikolka_config_FunkCfg.DEFAULT_MAP);
			return mikolka_config_FunkCfg.DEFAULT_MAP;
		}
		let lines = js_node_Fs.readFileSync(cfg_path,{ encoding : "utf8"}).split("\n");
		let map = new haxe_ds_StringMap();
		let _g = 0;
		while(_g < lines.length) {
			let line = lines[_g];
			++_g;
			if(line.includes("=")) {
				let seg = line.split("=");
				if(seg.length != 2) {
					process.stdout.write(Std.string("Malfolded line in config: " + line));
					process.stdout.write("\n");
					continue;
				}
				map.h[seg[0]] = seg[1];
			}
		}
		return map;
	}
	static saveFile(cfg_path,map) {
		let text = "";
		let h = map.h;
		let x_keys = Object.keys(h);
		let x_length = x_keys.length;
		let x_current = 0;
		while(x_current < x_length) {
			let key = x_keys[x_current++];
			text += key + "=" + h[key] + "\n";
		}
		js_node_Fs.writeFileSync(cfg_path,text);
	}
}
mikolka_config_FunkCfg.__name__ = true;
class mikolka_helpers_FileManager {
	static deleteDirRecursively(path) {
		mikolka_helpers_FileManager.scanDirectory(path,function(s) {
			js_node_Fs.unlinkSync(haxe_io_Path.join([path,s]));
		},function(s) {
			let path1 = haxe_io_Path.join([path,s]);
			if(sys_FileSystem.exists(path1)) {
				let _g = 0;
				let _g1 = js_node_Fs.readdirSync(path1);
				while(_g < _g1.length) {
					let curPath = path1 + "/" + _g1[_g++];
					if(sys_FileSystem.isDirectory(curPath)) {
						if(sys_FileSystem.exists(curPath)) {
							let _g = 0;
							let _g1 = js_node_Fs.readdirSync(curPath);
							while(_g < _g1.length) {
								let curPath1 = curPath + "/" + _g1[_g++];
								if(sys_FileSystem.isDirectory(curPath1)) {
									sys_FileSystem.deleteDirectory(curPath1);
								} else {
									js_node_Fs.unlinkSync(curPath1);
								}
							}
							js_node_Fs.rmdirSync(curPath);
						}
					} else {
						js_node_Fs.unlinkSync(curPath);
					}
				}
				js_node_Fs.rmdirSync(path1);
			}
		});
	}
	static isManifestPresent(modAssetsDir) {
		if(!sys_FileSystem.exists("" + modAssetsDir + "/_polymod_meta.json")) {
			return false;
		}
		return true;
	}
	static scanDirectory(prefix,onFile,onDir,path) {
		if(path == null) {
			path = "";
		}
		let fullPath = haxe_io_Path.join([prefix,path]);
		if(sys_FileSystem.exists(fullPath) && sys_FileSystem.isDirectory(fullPath)) {
			let entries = js_node_Fs.readdirSync(fullPath);
			let _g = 0;
			while(_g < entries.length) {
				let entry = entries[_g];
				++_g;
				if(sys_FileSystem.isDirectory(fullPath + "/" + entry)) {
					mikolka_helpers_FileManager.scanDirectory(prefix,onFile,onDir,path + "/" + entry);
					onDir(path + "/" + entry);
				} else {
					onFile(path + "/" + entry);
				}
			}
		}
	}
	static safelyCopyFile(from,to) {
		sys_FileSystem.createDirectory(haxe_io_Path.directory(to));
		sys_io_File.copy(from,to);
	}
	static getProjectPath(target) {
		if(Vscode.workspace.workspaceFolders.length == 0) {
			return null;
		}
		return haxe_io_Path.join([Vscode.workspace.workspaceFolders[0].uri.fsPath,target]);
	}
	static doesTargetExist(target) {
		let path = mikolka_helpers_FileManager.getProjectPath(target);
		if(path != null) {
			return sys_FileSystem.exists(path);
		} else {
			return false;
		}
	}
}
mikolka_helpers_FileManager.__name__ = true;
class mikolka_helpers_LangStrings {
	static FNFC_INVALID_FILE(file_path) {
		return "[WARN] " + file_path + " is not a valid chart file. Ignoring!";
	}
	static FNFC_INVALID_MANIFEST(file_path) {
		return "File " + file_path + " doesn't contain a valid \"manifest.json\" file";
	}
	static FNFC_INVALID_MANIFEST_SONG_ID(file_path) {
		return "It seems like \"manifest.json\" in " + file_path + " is missing a \"songId\" attribute...";
	}
}
mikolka_helpers_LangStrings.__name__ = true;
class mikolka_helpers_Process {
	static checkCommand(execName,cwd,errTitle) {
		if(errTitle == null) {
			errTitle = "Error checking command";
		}
		let proc = js_node_ChildProcess.spawnSync(execName,{ cwd : cwd});
		let code = proc.status;
		if(code != 0) {
			mikolka_vscode_Interaction.displayErrorAlert(errTitle,proc.output.toString());
		}
		return code == 0;
	}
	static isPureHaxelib() {
		let proc = js_node_ChildProcess.spawnSync("haxelib list");
		if(proc.status == 0) {
			return Std.string(proc.stdout).length == 0;
		} else {
			return false;
		}
	}
	static resolveCommand(command) {
		process.stdout.write(Std.string("*>> " + command));
		process.stdout.write("\n");
		let proc = js_node_ChildProcess.spawnSync(command);
		return proc.stdout;
	}
}
mikolka_helpers_Process.__name__ = true;
class mikolka_helpers_ZipTools {
	static makeZipArchive(target_to_archive,result_out) {
		let zip = new haxe_zip_Writer(result_out);
		let nodes = mikolka_helpers_ZipTools.getZipFileEntries(target_to_archive);
		nodes.add(mikolka_helpers_ZipTools.createIgnoreNode());
		zip.write(nodes);
	}
	static getZipFileEntries(dir,entries,inDir) {
		if(entries == null) {
			entries = new haxe_ds_List();
		}
		if(inDir == null) {
			inDir = dir;
		}
		mikolka_helpers_FileManager.scanDirectory(dir,function(s) {
			let path = haxe_io_Path.join([dir,s]);
			let bytes = haxe_io_Bytes.ofData(js_node_buffer__$Buffer_Helper.bytesOfBuffer(js_node_Fs.readFileSync(path)).b.bufferValue);
			let entry = { fileName : StringTools.replace(path,inDir,""), fileSize : bytes.length, fileTime : new Date(), compressed : false, dataSize : js_node_Fs.statSync(path).size, data : bytes, crc32 : haxe_crypto_Crc32.make(bytes)};
			entries.push(entry);
		},function(s) {
		});
		return entries;
	}
	static extractZip(file,target) {
		let zip = haxe_zip_Reader.readZip(file);
		sys_FileSystem.createDirectory(target);
		let _g_head = zip.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			if(val.crc32 == null || val.crc32 == 0) {
				sys_FileSystem.createDirectory(haxe_io_Path.join([target,val.fileName]));
			} else {
				haxe_zip_Tools.uncompress(val);
				let path = haxe_io_Path.join([target,val.fileName]);
				let bytes = val.data;
				let data = bytes.b;
				js_node_Fs.writeFileSync(path,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,bytes.length));
			}
		}
	}
	static createIgnoreNode() {
		return { fileName : ".disable_gb1click", fileSize : 0, fileTime : new Date(), compressed : false, dataSize : 0, data : new haxe_io_Bytes(new ArrayBuffer(0)), crc32 : haxe_crypto_Crc32.make(new haxe_io_Bytes(new ArrayBuffer(0)))};
	}
}
mikolka_helpers_ZipTools.__name__ = true;
class mikolka_programs_Fnfc {
	constructor(fnfc_path,mod_export_path) {
		this.path = fnfc_path;
		this.mod_export_path = mod_export_path;
	}
	processDirectory() {
		mikolka_helpers_FileManager.scanDirectory(this.path,$bind(this,this.processFile),function(s) {
		});
	}
	processFile(file_path) {
		if(!file_path.endsWith(".fnfc")) {
			console.log("src/mikolka/programs/Fnfc.hx:26:","[WARN] " + file_path + " is not a valid chart file. Ignoring!");
			return;
		}
		let zip = haxe_zip_Reader.readZip(new sys_io_FileInput(js_node_Fs.openSync(haxe_io_Path.join([this.path,file_path]),"r")));
		console.log("src/mikolka/programs/Fnfc.hx:30:",HxOverrides.substr(file_path,1,null));
		let fnfc_manifestList = zip.filter(function(s) {
			return s.fileName == "manifest.json";
		});
		if(fnfc_manifestList.length != 1) {
			mikolka_vscode_Interaction.displayError("File " + file_path + " doesn't contain a valid \"manifest.json\" file");
			return;
		}
		let fnfc_manifest = fnfc_manifestList.first().data.toString();
		let varGetter = new EReg("\"songId\": *\"(.+)\" *","i");
		if(!varGetter.match(fnfc_manifest)) {
			mikolka_vscode_Interaction.displayError("It seems like \"manifest.json\" in " + file_path + " is missing a \"songId\" attribute...");
			return;
		}
		let songId = varGetter.matched(1);
		let _g_head = zip.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			let target_File = "";
			if(val.fileName.endsWith(".json")) {
				target_File = haxe_io_Path.join([this.mod_export_path,"data/songs",songId,val.fileName]);
			} else if(val.fileName.endsWith(".ogg")) {
				target_File = haxe_io_Path.join([this.mod_export_path,"songs",songId,val.fileName]);
			} else {
				console.log("src/mikolka/programs/Fnfc.hx:59:","[WARN] file " + val.fileName + " is not known to be valid. Ignoring!");
				continue;
			}
			sys_FileSystem.createDirectory(haxe_io_Path.directory(target_File));
			let bytes = val.data;
			let data = bytes.b;
			js_node_Fs.writeFileSync(target_File,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,bytes.length));
		}
	}
}
mikolka_programs_Fnfc.__name__ = true;
class mikolka_programs_Hxc {
	constructor(src_path,mod_export_path) {
		this.src_path = src_path;
		this.mod_export_path = mod_export_path;
	}
	processDirectory() {
		mikolka_helpers_FileManager.scanDirectory(this.src_path,$bind(this,this.processFile),function(s) {
		});
	}
	processFile(file_name) {
		let shard = haxe_io_Path.join([this.src_path,file_name]);
		let filter = new EReg("package ([a-z.]+) *;","i");
		let content = js_node_Fs.readFileSync(shard,{ encoding : "utf8"});
		if(!filter.match(content)) {
			mikolka_vscode_Interaction.displayError("File " + shard + " is missing \"package\" line");
			return;
		}
		let result = mikolka_programs_Hxc.stripPackage ? content.replace(filter.r,"") : content;
		if(mikolka_programs_Hxc.convertCasts) {
			let _this_r = new RegExp("cast *\\((.*),.*\\)","g".split("u").join(""));
			result = result.replace(_this_r,"$1");
		}
		if(mikolka_programs_Hxc.convertImports) {
			let _this_r = new RegExp("import +([a-zA-z.]*)\\.[A-Z]\\w+\\.([A-Z]\\w+);","g".split("u").join(""));
			result = result.replace(_this_r,"import $1.$2;");
		}
		if(mikolka_programs_Hxc.mockPolymodCalls) {
			let _this_r = new RegExp("\\.polymodExecFunc *\\((.*),(\\W*\\[.*\\]\\W*)\\)","g".split("u").join(""));
			result = result.replace(_this_r,".scriptCall($1,$2)");
		}
		let filePackage = filter.matched(1).split(".");
		filePackage[0] = haxe_io_Path.join([this.mod_export_path,"scripts"]);
		let targetDir = haxe_io_Path.join(filePackage);
		sys_FileSystem.createDirectory(targetDir);
		console.log("src/mikolka/programs/Hxc.hx:58:",HxOverrides.substr(file_name,1,null));
		js_node_Fs.writeFileSync(haxe_io_Path.join([targetDir,haxe_io_Path.withoutDirectory(file_name) + "c"]),result);
	}
}
mikolka_programs_Hxc.__name__ = true;
class mikolka_vscode_CommandRegistry {
	static makeCommand(name,context,action) {
		context.subscriptions.push(Vscode.commands.registerCommand("mikolka." + name,action));
	}
	static registerCommands(context) {
		let cfg = mikolka_Main.projectConfig;
		mikolka_vscode_CommandRegistry.makeCommand("setup",context,function() {
			mikolka_commands_SetupTask.task_setupEnvironment(cfg.get_TEMPLATE_REMOTE_SRC());
		});
		mikolka_vscode_CommandRegistry.makeCommand("new",context,function() {
			mikolka_commands_ProjectTasks.task_setupProject(cfg.get_TEMPLATE_REMOTE_SRC());
		});
		mikolka_vscode_CommandRegistry.makeCommand("just-run",context,function() {
			mikolka_commands_CompileTasks.Task_RunGame(cfg.get_GAME_PATH());
		});
		mikolka_vscode_CommandRegistry.makeCommand("just-compile",context,function() {
			mikolka_commands_CompileTasks.Task_CompileGame(cfg.get_MOD_CONTENT_FOLDER(),cfg.get_MOD_HX_FOLDER(),cfg.get_MOD_FNFC_FOLDER(),cfg.get_GAME_PATH() + "/mods/" + cfg.get_GAME_MOD_NAME());
			console.log("src/mikolka/vscode/ComandRegistry.hx:24:","Done!");
		});
		mikolka_vscode_CommandRegistry.makeCommand("run",context,function() {
			mikolka_commands_CompileTasks.Task_CompileGame(cfg.get_MOD_CONTENT_FOLDER(),cfg.get_MOD_HX_FOLDER(),cfg.get_MOD_FNFC_FOLDER(),cfg.get_GAME_PATH() + "/mods/" + cfg.get_GAME_MOD_NAME());
			mikolka_commands_CompileTasks.Task_RunGame(cfg.get_GAME_PATH());
		});
		mikolka_vscode_CommandRegistry.makeCommand("export",context,function() {
			mikolka_commands_CompileTasks.Task_ExportGame(cfg.get_MOD_CONTENT_FOLDER(),cfg.get_MOD_HX_FOLDER(),cfg.get_MOD_FNFC_FOLDER(),cfg.get_GAME_PATH() + "/mods/" + cfg.get_GAME_MOD_NAME());
			console.log("src/mikolka/vscode/ComandRegistry.hx:32:","Done!");
		});
	}
}
mikolka_vscode_CommandRegistry.__name__ = true;
class mikolka_vscode_DebuggerSetup {
	static init(context) {
		context.subscriptions.push(Vscode.debug.registerDebugConfigurationProvider("run-game",{ resolveDebugConfiguration : function(folder,debugConfiguration,token) {
			let project_folder = folder != null ? folder.uri.fsPath : null;
			if(project_folder == null) {
				mikolka_vscode_Interaction.displayError("Running FNF without a folder! This will likely fail!");
			}
			return mikolka_vscode_DebuggerSetup.requestStaticConfiguration(project_folder,debugConfiguration);
		}},vscode_DebugConfigurationProviderTriggerKind.Initial));
	}
	static spawnFunkinGame() {
		if(Vscode.debug.activeDebugSession != null) {
			return;
		}
		let tmp = Vscode.workspace;
		let folder = tmp != null ? tmp.workspaceFolders[0] : null;
		if(folder == null) {
			mikolka_vscode_Interaction.displayErrorAlert("Cannot start the game","You need to open a folder before starting it!");
			return;
		}
		Vscode.debug.startDebugging(folder,{ type : "run-game", name : "Spawn Funkin instance", request : "launch"}).then(function(success) {
			if(!success) {
				Vscode.window.showErrorMessage("Funkin failed to funk!",{ modal : true});
			}
		});
	}
	static requestStaticConfiguration(project_game_folder,base) {
		console.log("src/mikolka/vscode/DebuggerSetup.hx:62:","AYO!!");
		if(base.execName == null) {
			base.execName = Sys.systemName() == "Windows" ? "Funkin.exe" : "Funkin";
		}
		if(base.cmd_prefix == null) {
			base.cmd_prefix = "";
		}
		if(base.cmd_prefix == null) {
			base.cmd_prefix = "";
		}
		if(base.cmd_prefix == null) {
			base.cmd_prefix = "";
		}
		if(base.args == null) {
			base.args = [];
		}
		if(base.trace == null) {
			base.trace = true;
		}
		if(base.cwd == null) {
			base.cwd = "../funkinGame/";
		}
		base.cwd = haxe_io_Path.join([project_game_folder,base.cwd]);
		console.log("src/mikolka/vscode/DebuggerSetup.hx:72:",base);
		return base;
	}
}
mikolka_vscode_DebuggerSetup.__name__ = true;
class mikolka_vscode_Interaction {
	static displayError(msg) {
		Vscode.window.showErrorMessage(msg);
	}
	static displayErrorAlert(title,message) {
		Vscode.window.showErrorMessage(title,{ modal : true, detail : message});
	}
	static requestInput(prompt,next) {
		Vscode.window.showInputBox({ title : prompt}).then(next,function(out) {
			mikolka_vscode_Interaction.displayError("Action canceled!");
		});
	}
	static requestConfirmation(prompt,onYes,onNo) {
		Vscode.window.showWarningMessage(prompt,"Yes","No").then(function(result) {
			if(result == "Yes") {
				onYes();
			} else if(result == "No") {
				onNo();
			} else {
				mikolka_vscode_Interaction.displayError("Action aborted!");
			}
		});
	}
	static showPressToContinue(prompt) {
		if(prompt == null) {
			prompt = "[FIXME] Press any key to continue";
		}
		Vscode.window.showWarningMessage(prompt);
	}
}
mikolka_vscode_Interaction.__name__ = true;
class sys_FileSystem {
	static exists(path) {
		try {
			js_node_Fs.accessSync(path);
			return true;
		} catch( _g ) {
			return false;
		}
	}
	static isDirectory(path) {
		try {
			return js_node_Fs.statSync(path).isDirectory();
		} catch( _g ) {
			return false;
		}
	}
	static createDirectory(path) {
		try {
			js_node_Fs.mkdirSync(path);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "ENOENT") {
				sys_FileSystem.createDirectory(js_node_Path.dirname(path));
				js_node_Fs.mkdirSync(path);
			} else {
				let stat;
				try {
					stat = js_node_Fs.statSync(path);
				} catch( _g ) {
					throw _g1;
				}
				if(!stat.isDirectory()) {
					throw _g1;
				}
			}
		}
	}
	static deleteDirectory(path) {
		if(sys_FileSystem.exists(path)) {
			let _g = 0;
			let _g1 = js_node_Fs.readdirSync(path);
			while(_g < _g1.length) {
				let curPath = path + "/" + _g1[_g++];
				if(sys_FileSystem.isDirectory(curPath)) {
					sys_FileSystem.deleteDirectory(curPath);
				} else {
					js_node_Fs.unlinkSync(curPath);
				}
			}
			js_node_Fs.rmdirSync(path);
		}
	}
}
sys_FileSystem.__name__ = true;
class sys_io_File {
	static copy(srcPath,dstPath) {
		let src = js_node_Fs.openSync(srcPath,"r");
		let stat = js_node_Fs.fstatSync(src);
		let dst = js_node_Fs.openSync(dstPath,"w",stat.mode);
		let bytesRead;
		let pos = 0;
		while(true) {
			bytesRead = js_node_Fs.readSync(src,sys_io_File.copyBuf,0,65536,pos);
			if(!(bytesRead > 0)) {
				break;
			}
			js_node_Fs.writeSync(dst,sys_io_File.copyBuf,0,bytesRead);
			pos += bytesRead;
		}
		js_node_Fs.closeSync(src);
		js_node_Fs.closeSync(dst);
	}
}
sys_io_File.__name__ = true;
class sys_io_FileInput extends haxe_io_Input {
	constructor(fd) {
		super();
		this.hasReachedEof = false;
		this.fd = fd;
		this.pos = 0;
	}
	throwEof() {
		this.hasReachedEof = true;
		throw haxe_Exception.thrown(new haxe_io_Eof());
	}
	readByte() {
		let buf = js_node_buffer_Buffer.alloc(1);
		let bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				this.hasReachedEof = true;
				throw haxe_Exception.thrown(new haxe_io_Eof());
			}
			throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
		}
		if(bytesRead == 0) {
			this.hasReachedEof = true;
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	readBytes(s,pos,len) {
		let data = s.b;
		let buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		let bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				this.hasReachedEof = true;
				throw haxe_Exception.thrown(new haxe_io_Eof());
			}
			throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
		}
		if(bytesRead == 0) {
			this.hasReachedEof = true;
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
	seek(p,pos) {
		this.hasReachedEof = false;
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	tell() {
		return this.pos;
	}
	eof() {
		return this.hasReachedEof;
	}
}
sys_io_FileInput.__name__ = true;
class sys_io_FileOutput extends haxe_io_Output {
	constructor(fd) {
		super();
		this.fd = fd;
		this.pos = 0;
	}
	writeByte(b) {
		let buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	writeBytes(s,pos,len) {
		let data = s.b;
		let buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		let wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
	seek(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	tell() {
		return this.pos;
	}
}
sys_io_FileOutput.__name__ = true;
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__:true,__constructs__:null
	,SeekBegin: {_hx_name:"SeekBegin",_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_name:"SeekCur",_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_name:"SeekEnd",_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
sys_io_FileSeek.__constructs__ = [sys_io_FileSeek.SeekBegin,sys_io_FileSeek.SeekCur,sys_io_FileSeek.SeekEnd];
var vscode_DebugConfigurationProviderTriggerKind = require("vscode").DebugConfigurationProviderTriggerKind;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
{
	String.__name__ = true;
	Array.__name__ = true;
	Date.__name__ = "Date";
}
js_Boot.__toStr = ({ }).toString;
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
mikolka_commands_SetupTask.localCwd = "";
mikolka_config_FunkCfg.DEFAULT_MAP = (function($this) {
	var $r;
	let _g = new haxe_ds_StringMap();
	_g.h["game_path"] = "../funkinGame";
	_g.h["game_mod_name"] = "workbench";
	_g.h["mod_fnfc_folder"] = "fnfc_files";
	_g.h["mod_hx_folder"] = "source/mod/";
	_g.h["mod_content_folder"] = "mod_base";
	_g.h["template_remote_src"] = "https://raw.githubusercontent.com/FunkinCompiler/template-binaries/refs/heads/main/0.6.3.zip";
	$r = _g;
	return $r;
}(this));
mikolka_helpers_LangStrings.MSG_EXPORT_ZIP_NAME = "Type in a name for your exported file (without .zip):";
mikolka_helpers_LangStrings.MSG_EXPORT_META_MISSING = "Your mod doesn't contain \"_polymod_meta.json\". Please create a valid metadata file for this mod first!";
mikolka_helpers_LangStrings.MSG_EXPORT_META_NO_VERSION = "It seems like your \"_polymod_meta.json\" is missing a \"mod_version\" attribute...";
mikolka_helpers_LangStrings.MSG_EXPORT_MOD_VERSION = "What version number should be used for this mod version? Leave blank to use the current one";
mikolka_helpers_LangStrings.MSG_SETUP_CHECKING_GIT = "[SETUP] Checking git..";
mikolka_helpers_LangStrings.MSG_SETUP_CHECKING_HAXE = "[SETUP] Checking haxe..";
mikolka_helpers_LangStrings.SETUP_GIT_ERROR = "Git is absent on this system. You can install it from here: https://git-scm.com/";
mikolka_helpers_LangStrings.SETUP_HAXE_ERROR = "You don't have haxe???\nGet it from here: https://haxe.org/download/";
mikolka_helpers_LangStrings.SETUP_HAXELIB_ERROR = "You seem to have non-empty, or absent dependencies folder.\n" + "You can reinstall existing dependencies, or keep them as is.\n" + "Do you want to reinstall? (yes/no): ";
mikolka_helpers_LangStrings.PROJECT_NAME_PROMPT = "Type in the name of the project:";
mikolka_programs_Hxc.stripPackage = true;
mikolka_programs_Hxc.convertCasts = true;
mikolka_programs_Hxc.convertImports = true;
mikolka_programs_Hxc.mockPolymodCalls = true;
sys_io_File.copyBuf = js_node_buffer_Buffer.alloc(65536);
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
