// Generated by Haxe 4.3.7
(function ($hx_exports, $global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() { };
Main.__name__ = true;
Main.activate = $hx_exports["activate"] = function(context) {
	Vscode.window.showInformationMessage("Hello from Haxe!");
	Main.projectConfig = new mikolka_config_FunkCfg();
	context.subscriptions.push(Vscode.commands.registerCommand("hellohaxe.sayHello",function() {
		Vscode.window.showInformationMessage("Hello from Haxe!");
	}));
	mikolka_vscode_CommandRegistry.registerCommands(context);
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x);
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Sys = function() { };
Sys.__name__ = true;
Sys.systemName = function() {
	var _g = process.platform;
	switch(_g) {
	case "darwin":
		return "Mac";
	case "freebsd":
		return "BSD";
	case "linux":
		return "Linux";
	case "win32":
		return "Windows";
	default:
		return _g;
	}
};
var haxe_io_Output = function() { };
haxe_io_Output.__name__ = true;
haxe_io_Output.prototype = {
	writeByte: function(c) {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Output.hx", lineNumber : 47, className : "haxe.io.Output", methodName : "writeByte"});
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,flush: function() {
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw haxe_Exception.thrown(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
};
var _$Sys_FileOutput = function(fd) {
	this.fd = fd;
};
_$Sys_FileOutput.__name__ = true;
_$Sys_FileOutput.__super__ = haxe_io_Output;
_$Sys_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		js_node_Fs.writeSync(this.fd,String.fromCodePoint(c));
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		return js_node_Fs.writeSync(this.fd,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),pos,len);
	}
	,writeString: function(s,encoding) {
		js_node_Fs.writeSync(this.fd,s);
	}
	,flush: function() {
		js_node_Fs.fsyncSync(this.fd);
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
});
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
};
var _$Sys_FileInput = function(fd) {
	this.fd = fd;
};
_$Sys_FileInput.__name__ = true;
_$Sys_FileInput.__super__ = haxe_io_Input;
_$Sys_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		try {
			js_node_Fs.readSync(this.fd,buf,0,1,null);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
			}
		}
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		try {
			return js_node_Fs.readSync(this.fd,buf,pos,len,null);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
			}
		}
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
});
var Vscode = require("vscode");
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
haxe_crypto_Adler32.__name__ = true;
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	a.a1 = i.readByte() << 8 | i.readByte();
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			a1 = (a1 + b.b[_g++]) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
};
var haxe_crypto_Crc32 = function() { };
haxe_crypto_Crc32.__name__ = true;
haxe_crypto_Crc32.make = function(data) {
	var c_crc = -1;
	var len = data.length;
	var b = data.b.bufferValue;
	var _g = 0;
	while(_g < len) {
		var tmp = (c_crc ^ b.bytes[_g++]) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		c_crc = c_crc >>> 8 ^ tmp;
	}
	return c_crc ^ -1;
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = true;
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = true;
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,filter: function(f) {
		var l2 = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = true;
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
};
haxe_exceptions_PosException.__name__ = true;
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
};
haxe_exceptions_NotImplementedException.__name__ = true;
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
});
var haxe_http_HttpBase = function(url) {
	this.url = url;
	this.headers = [];
	this.params = [];
	this.emptyOnData = $bind(this,this.onData);
};
haxe_http_HttpBase.__name__ = true;
haxe_http_HttpBase.prototype = {
	onData: function(data) {
	}
	,onBytes: function(data) {
	}
	,onError: function(msg) {
	}
	,onStatus: function(status) {
	}
	,hasOnData: function() {
		return $bind(this,this.onData) != this.emptyOnData;
	}
	,success: function(data) {
		this.responseBytes = data;
		this.responseAsString = null;
		if(this.hasOnData()) {
			this.onData(this.get_responseData());
		}
		this.onBytes(this.responseBytes);
	}
	,get_responseData: function() {
		if(this.responseAsString == null && this.responseBytes != null) {
			this.responseAsString = this.responseBytes.getString(0,this.responseBytes.length,haxe_io_Encoding.UTF8);
		}
		return this.responseAsString;
	}
};
var haxe_http_HttpNodeJs = function(url) {
	haxe_http_HttpBase.call(this,url);
};
haxe_http_HttpNodeJs.__name__ = true;
haxe_http_HttpNodeJs.__super__ = haxe_http_HttpBase;
haxe_http_HttpNodeJs.prototype = $extend(haxe_http_HttpBase.prototype,{
	request: function(post) {
		var _gthis = this;
		this.responseAsString = null;
		this.responseBytes = null;
		this.responseHeaders = null;
		var parsedUrl = new js_node_url_URL(this.url);
		var secure = parsedUrl.protocol == "https:";
		var host = parsedUrl.hostname;
		var path = parsedUrl.pathname;
		var port = parsedUrl.port != null ? Std.parseInt(parsedUrl.port) : secure ? 443 : 80;
		var h = { };
		var _g = 0;
		var _g1 = this.headers;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var arr = Reflect.field(h,i.name);
			if(arr == null) {
				arr = [];
				h[i.name] = arr;
			}
			arr.push(i.value);
		}
		if(this.postData != null || this.postBytes != null) {
			post = true;
		}
		var uri = null;
		var _g = 0;
		var _g1 = this.params;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(uri == null) {
				uri = "";
			} else {
				uri += "&";
			}
			var s = p.name;
			var uri1 = encodeURIComponent(s) + "=";
			var s1 = p.value;
			uri += uri1 + encodeURIComponent(s1);
		}
		var question = path.split("?").length <= 1;
		if(uri != null) {
			path += (question ? "?" : "&") + uri;
		}
		var opts = { protocol : parsedUrl.protocol, hostname : host, port : port, method : post ? "POST" : "GET", path : path, headers : h};
		var httpResponse = function(res) {
			res.setEncoding("binary");
			var s = res.statusCode;
			if(s != null) {
				_gthis.onStatus(s);
			}
			var data = [];
			res.on("data",function(chunk) {
				data.push(js_node_buffer_Buffer.from(chunk,"binary"));
			});
			res.on("end",function(_) {
				var buf = data.length == 1 ? data[0] : js_node_buffer_Buffer.concat(data);
				var httpResponse = buf.buffer.slice(buf.byteOffset,buf.byteOffset + buf.byteLength);
				_gthis.responseBytes = haxe_io_Bytes.ofData(httpResponse);
				_gthis.req = null;
				_gthis.responseHeaders = new haxe_ds_StringMap();
				var _g = 0;
				var _g1 = Reflect.fields(res.headers);
				while(_g < _g1.length) {
					var field = _g1[_g];
					++_g;
					_gthis.responseHeaders.h[field] = Reflect.field(res.headers,field);
				}
				if(s != null && s >= 200 && s < 400) {
					_gthis.success(_gthis.responseBytes);
				} else {
					_gthis.onError("Http Error #" + s);
				}
			});
		};
		this.req = secure ? js_node_Https.request(opts,httpResponse) : js_node_Http.request(opts,httpResponse);
		if(post) {
			if(this.postData != null) {
				this.req.write(this.postData);
			} else if(this.postBytes != null) {
				this.req.setHeader("Content-Length","" + this.postBytes.length);
				this.req.write(js_node_buffer_Buffer.from(this.postBytes.b.bufferValue));
			}
		}
		this.req.end();
	}
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var code1 = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
haxe_io_BytesBuffer.__name__ = true;
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
haxe_io_BytesOutput.__name__ = true;
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:true,__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
haxe_io_Path.__name__ = true;
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < paths.length) {
		var v = paths[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	if(_g.length == 0) {
		return "";
	}
	var path = _g[0];
	var _g1 = 1;
	var _g2 = _g.length;
	while(_g1 < _g2) {
		path = haxe_io_Path.addTrailingSlash(path);
		path += _g[_g1++];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g_offset = 0;
	var _g_s = target.join(slash);
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var haxe_zip_Compress = function(level) {
	throw haxe_Exception.thrown("Not implemented for this platform");
};
haxe_zip_Compress.__name__ = true;
haxe_zip_Compress.run = function(s,level) {
	var data = s.b;
	var buffer = js_node_Zlib.deflateSync(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length),{ level : level});
	return js_node_buffer__$Buffer_Helper.bytesOfBuffer(buffer);
};
haxe_zip_Compress.prototype = {
	execute: function(src,srcPos,dst,dstPos) {
		return null;
	}
	,setFlushMode: function(f) {
	}
	,close: function() {
	}
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__:true,__constructs__:null
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_._hx_name="FUnknown",$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_._hx_name="FInfoZipUnicodePath",$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_name:"FUtf8",_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
haxe_zip_ExtraField.__constructs__ = [haxe_zip_ExtraField.FUnknown,haxe_zip_ExtraField.FInfoZipUnicodePath,haxe_zip_ExtraField.FUtf8];
var haxe_zip_FlushMode = $hxEnums["haxe.zip.FlushMode"] = { __ename__:true,__constructs__:null
	,NO: {_hx_name:"NO",_hx_index:0,__enum__:"haxe.zip.FlushMode",toString:$estr}
	,SYNC: {_hx_name:"SYNC",_hx_index:1,__enum__:"haxe.zip.FlushMode",toString:$estr}
	,FULL: {_hx_name:"FULL",_hx_index:2,__enum__:"haxe.zip.FlushMode",toString:$estr}
	,FINISH: {_hx_name:"FINISH",_hx_index:3,__enum__:"haxe.zip.FlushMode",toString:$estr}
	,BLOCK: {_hx_name:"BLOCK",_hx_index:4,__enum__:"haxe.zip.FlushMode",toString:$estr}
};
haxe_zip_FlushMode.__constructs__ = [haxe_zip_FlushMode.NO,haxe_zip_FlushMode.SYNC,haxe_zip_FlushMode.FULL,haxe_zip_FlushMode.FINISH,haxe_zip_FlushMode.BLOCK];
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:true,__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBit",$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBits",$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
var haxe_zip_HuffTools = function() {
};
haxe_zip_HuffTools.__name__ = true;
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			return 0;
		case 1:
			var da = this.treeDepth(t.left);
			var db = this.treeDepth(t.right);
			return 1 + (da < db ? da : db);
		case 2:
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				return haxe_zip_Huffman.NeedBit(this.treeCompress(t.left),this.treeCompress(t.right));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		while(_g < size) {
			++_g;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,t.left);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,t.right);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		while(_g < maxbits) {
			++_g;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		while(_g < nlengths) {
			var p = lengths[_g++ + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		while(_g < nlengths) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
haxe_zip__$InflateImpl_Window.__name__ = true;
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:true,__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
haxe_zip_InflateImpl.__name__ = true;
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		while(_g < n) {
			++_g;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			return h.i;
		case 1:
			return this.applyHuffman(this.getBit() ? h.right : h.left);
		case 2:
			return this.applyHuffman(h.table[this.getBits(h.n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			if((cmf & 15) != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if((flg & 32) != 0) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				if(this.input.readUInt16() != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				while(_g < hclen) this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[_g++]] = this.getBits(3);
				var _g = hclen;
				while(_g < 19) this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[_g++]] = 0;
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					++_g;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			if(!calc.equals(haxe_crypto_Adler32.read(this.input))) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
haxe_zip_Reader.__name__ = true;
haxe_zip_Reader.readZip = function(i) {
	return new haxe_zip_Reader(i).read();
};
haxe_zip_Reader.prototype = {
	readZipDate: function() {
		var t = this.i.readUInt16();
		var d = this.i.readUInt16();
		return new Date((d >> 9) + 1980,(d >> 5 & 15) - 1,d & 31,t >> 11 & 31,t >> 5 & 63,(t & 31) << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(this.i.read(len - 5).toString(),crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		i.readUInt16();
		var flags = i.readUInt16();
		if((flags & 63473) != 0) {
			throw haxe_Exception.thrown("Unsupported flags " + flags);
		}
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if((flags & 2048) != 0) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : null, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.crc32 == null) {
				if(e.compressed) {
					if(tmp == null) {
						tmp = new haxe_io_Bytes(new ArrayBuffer(65536));
					}
					var out = new haxe_io_BytesBuffer();
					var z = new haxe_zip_InflateImpl(this.i,false,false);
					while(true) {
						var n = z.readBytes(tmp,0,65536);
						out.addBytes(tmp,0,n);
						if(n < 65536) {
							break;
						}
					}
					e.data = out.getBytes();
				} else {
					e.data = this.i.read(e.dataSize);
				}
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
};
var haxe_zip_Tools = function() { };
haxe_zip_Tools.__name__ = true;
haxe_zip_Tools.uncompress = function(f) {
	if(!f.compressed) {
		return;
	}
	var c = new haxe_zip_Uncompress(-15);
	var s = new haxe_io_Bytes(new ArrayBuffer(f.fileSize));
	var r = c.execute(f.data,0,s,0);
	c.close();
	if(!r.done || r.read != f.data.length || r.write != f.fileSize) {
		throw haxe_Exception.thrown("Invalid compressed data for " + f.fileName);
	}
	f.compressed = false;
	f.dataSize = f.fileSize;
	f.data = s;
};
var haxe_zip_Uncompress = function(windowBits) {
	this.windowBits = windowBits;
};
haxe_zip_Uncompress.__name__ = true;
haxe_zip_Uncompress.run = function(src,bufsize) {
	var data = src.b;
	var buffer = js_node_Zlib.inflateSync(js_node_buffer_Buffer.from(data.buffer,data.byteOffset,src.length),bufsize == null ? { } : { chunkSize : bufsize});
	return js_node_buffer__$Buffer_Helper.bytesOfBuffer(buffer);
};
haxe_zip_Uncompress.prototype = {
	execute: function(src,srcPos,dst,dstPos) {
		var data = src.b;
		var src1 = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,src.length).slice(srcPos);
		var data = dst.b;
		var dst1 = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,dst.length);
		var res = js_node_Zlib.inflateRawSync(src1,{ info : true});
		var engine = res.engine;
		var res1 = res.buffer;
		dst1.set(res1,dstPos);
		return { done : true, read : engine.bytesRead, write : res1.byteLength};
	}
	,setFlushMode: function(f) {
	}
	,close: function() {
	}
};
var haxe_zip_Writer = function(o) {
	this.o = o;
	this.files = new haxe_ds_List();
};
haxe_zip_Writer.__name__ = true;
haxe_zip_Writer.prototype = {
	writeZipDate: function(date) {
		this.o.writeUInt16(date.getHours() << 11 | date.getMinutes() << 5 | date.getSeconds() >> 1);
		this.o.writeUInt16(date.getFullYear() - 1980 << 9 | date.getMonth() + 1 << 5 | date.getDate());
	}
	,writeEntryHeader: function(f) {
		var o = this.o;
		var flags = 0;
		if(f.extraFields != null) {
			var _g_head = f.extraFields.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				if(val._hx_index == 2) {
					flags |= 2048;
				}
			}
		}
		o.writeInt32(67324752);
		o.writeUInt16(20);
		o.writeUInt16(flags);
		if(f.data == null) {
			f.fileSize = 0;
			f.dataSize = 0;
			f.crc32 = 0;
			f.compressed = false;
			f.data = new haxe_io_Bytes(new ArrayBuffer(0));
		} else {
			if(f.crc32 == null) {
				if(f.compressed) {
					throw haxe_Exception.thrown("CRC32 must be processed before compression");
				}
				f.crc32 = haxe_crypto_Crc32.make(f.data);
			}
			if(!f.compressed) {
				f.fileSize = f.data.length;
			}
			f.dataSize = f.data.length;
		}
		o.writeUInt16(f.compressed ? 8 : 0);
		this.writeZipDate(f.fileTime);
		o.writeInt32(f.crc32);
		o.writeInt32(f.dataSize);
		o.writeInt32(f.fileSize);
		o.writeUInt16(f.fileName.length);
		var e = new haxe_io_BytesOutput();
		if(f.extraFields != null) {
			var _g_head = f.extraFields.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				switch(val._hx_index) {
				case 0:
					var _g = val.bytes;
					e.writeUInt16(val.tag);
					e.writeUInt16(_g.length);
					e.write(_g);
					break;
				case 1:
					var namebytes = haxe_io_Bytes.ofString(val.name);
					e.writeUInt16(28789);
					e.writeUInt16(namebytes.length + 5);
					e.writeByte(1);
					e.writeInt32(val.crc);
					e.write(namebytes);
					break;
				case 2:
					break;
				}
			}
		}
		var ebytes = e.getBytes();
		o.writeUInt16(ebytes.length);
		o.writeString(f.fileName);
		o.write(ebytes);
		this.files.add({ name : f.fileName, compressed : f.compressed, clen : f.data.length, size : f.fileSize, crc : f.crc32, date : f.fileTime, fields : ebytes});
	}
	,write: function(files) {
		var _g_head = files.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			this.writeEntryHeader(val);
			this.o.writeFullBytes(val.data,0,val.data.length);
		}
		this.writeCDR();
	}
	,writeCDR: function() {
		var cdr_size = 0;
		var cdr_offset = 0;
		var _g_head = this.files.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var namelen = val.name.length;
			var extraFieldsLength = val.fields.length;
			this.o.writeInt32(33639248);
			this.o.writeUInt16(20);
			this.o.writeUInt16(20);
			this.o.writeUInt16(0);
			this.o.writeUInt16(val.compressed ? 8 : 0);
			this.writeZipDate(val.date);
			this.o.writeInt32(val.crc);
			this.o.writeInt32(val.clen);
			this.o.writeInt32(val.size);
			this.o.writeUInt16(namelen);
			this.o.writeUInt16(extraFieldsLength);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeUInt16(0);
			this.o.writeInt32(0);
			this.o.writeInt32(cdr_offset);
			this.o.writeString(val.name);
			this.o.write(val.fields);
			cdr_size += 46 + namelen + extraFieldsLength;
			cdr_offset += 30 + namelen + extraFieldsLength + val.clen;
		}
		this.o.writeInt32(101010256);
		this.o.writeUInt16(0);
		this.o.writeUInt16(0);
		this.o.writeUInt16(this.files.length);
		this.o.writeUInt16(this.files.length);
		this.o.writeInt32(cdr_size);
		this.o.writeInt32(cdr_offset);
		this.o.writeUInt16(0);
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = true;
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var js_node_ChildProcess = require("child_process");
var js_node_Fs = require("fs");
var js_node_Http = require("http");
var js_node_Https = require("https");
var js_node_KeyValue = {};
js_node_KeyValue.get_key = function(this1) {
	return this1[0];
};
js_node_KeyValue.get_value = function(this1) {
	return this1[1];
};
var js_node_Path = require("path");
var js_node_Zlib = require("zlib");
var js_node_buffer_Buffer = require("buffer").Buffer;
var js_node_buffer__$Buffer_Helper = function() { };
js_node_buffer__$Buffer_Helper.__name__ = true;
js_node_buffer__$Buffer_Helper.bytesOfBuffer = function(b) {
	var o = Object.create(haxe_io_Bytes.prototype);
	o.length = b.byteLength;
	o.b = b;
	b.bufferValue = b;
	b.hxBytes = o;
	b.bytes = b;
	return o;
};
var js_node_stream_WritableNewOptionsAdapter = {};
js_node_stream_WritableNewOptionsAdapter.from = function(options) {
	if(!Object.prototype.hasOwnProperty.call(options,"final")) {
		Object.defineProperty(options,"final",{ get : function() {
			return options.final_;
		}});
	}
	return options;
};
var js_node_url_URL = require("url").URL;
var js_node_url_URLSearchParamsEntry = {};
js_node_url_URLSearchParamsEntry._new = function(name,value) {
	return [name,value];
};
js_node_url_URLSearchParamsEntry.get_name = function(this1) {
	return this1[0];
};
js_node_url_URLSearchParamsEntry.get_value = function(this1) {
	return this1[1];
};
var mikolka_commands_CompileTasks = function() { };
mikolka_commands_CompileTasks.__name__ = true;
mikolka_commands_CompileTasks.Task_ExportGame = function(mod_assets,hxc_source,fnfc_assets,export_mod_path) {
	if(!mikolka_helpers_FileManager.isManifestPresent(mod_assets)) {
		mikolka_vscode_Interaction.displayError("Your mod doesn't contain \"_polymod_meta.json\". Please create a valid metadata file for this mod first!");
		return;
	}
	var manifestPath = "" + mod_assets + "/_polymod_meta.json";
	var poly_json = js_node_Fs.readFileSync(manifestPath,{ encoding : "utf8"});
	var varGetter = new EReg("\"mod_version\": *\"([0-9.]+)\" *","i");
	if(!varGetter.match(poly_json)) {
		mikolka_vscode_Interaction.displayError("It seems like your \"_polymod_meta.json\" is missing a \"mod_version\" attribute...");
		return;
	}
	mikolka_vscode_Interaction.requestInput("Type in a name for your exported file (without .zip):",function(userModName) {
		var currentModVersion = varGetter.matched(1);
		Vscode.window.showInputBox({ title : "What version number should be used for this mod version? Leave blank to use the current one", prompt : "replace this!!!", placeHolder : "1.0.0", value : currentModVersion, validateInput : function(input) {
			if(!new EReg("[0-9.]+","i").match(input) && input != "") {
				return "Invalid version string. Use Semacic versioning here!";
			}
			return null;
		}}).then(function(userModVersion) {
			if(userModVersion != "") {
				var new_poly = poly_json.replace(varGetter.r,"\"mod_version\": \"" + userModVersion + "\"");
				js_node_Fs.writeFileSync(manifestPath,new_poly);
				console.log("src/mikolka/commands/CompileTasks.hx:47:","Updated you mod's version to " + userModVersion);
			}
			mikolka_commands_CompileTasks.Task_CompileGame(mod_assets,hxc_source,fnfc_assets,export_mod_path);
			var out = new sys_io_FileOutput(js_node_Fs.openSync("" + userModName + ".zip","w"));
			mikolka_helpers_ZipTools.makeZipArchive(export_mod_path,out);
		},function(out) {
			mikolka_vscode_Interaction.displayError("Action canceled!");
		});
	});
};
mikolka_commands_CompileTasks.Task_CompileGame = function(mod_assets,hxc_source,fnfc_assets,export_mod_path) {
	if(!mikolka_helpers_FileManager.isManifestPresent(mod_assets)) {
		return;
	}
	mikolka_helpers_FileManager.deleteDirRecursively(export_mod_path);
	mikolka_commands_CompileTasks.copyTemplate(mod_assets,export_mod_path);
	var hxc = new mikolka_programs_Hxc(hxc_source,export_mod_path);
	new mikolka_programs_Fnfc(fnfc_assets,export_mod_path).processDirectory();
	hxc.processDirectory();
};
mikolka_commands_CompileTasks.Task_RunGame = function(game_path) {
	var tmp = mikolka_helpers_FileManager.getProjectPath(game_path);
	var project_game_folder = tmp != null ? tmp : "";
	var linux_bin = mikolka_helpers_FileManager.doesTargetExist(haxe_io_Path.join([game_path,"Funkin"]));
	var windows_bin = mikolka_helpers_FileManager.doesTargetExist(haxe_io_Path.join([game_path,"Funkin.exe"]));
	var mac_bin = mikolka_helpers_FileManager.doesTargetExist(haxe_io_Path.join([game_path,"Funkin.app"]));
	if(windows_bin) {
		if(Sys.systemName() == "Windows") {
			mikolka_helpers_Process.spawnFunkinGame(project_game_folder,"Funkin.exe");
		} else {
			console.log("src/mikolka/commands/CompileTasks.hx:82:","[INFO] Windows build on non-windows machine. Attempting to run using wine...");
			mikolka_helpers_Process.spawnFunkinGame(project_game_folder,"Funkin.exe","wine ");
		}
	} else if(linux_bin) {
		if(Sys.systemName() == "Linux") {
			mikolka_helpers_Process.spawnFunkinGame(project_game_folder,"Funkin");
		} else {
			mikolka_vscode_Interaction.displayError("Incompatible FNF version. Replace it with the windows one.");
		}
	} else if(mac_bin && Sys.systemName() == "Mac") {
		mikolka_vscode_Interaction.displayError("I personally don't know how to run the game natively on your platform\n" + "You might try to install wine and use Windows build instead");
	} else {
		mikolka_vscode_Interaction.displayError("No FNF binary found. Make sure that there's copy of FNF in " + project_game_folder + " directory.");
	}
};
mikolka_commands_CompileTasks.copyTemplate = function(mod_assets,export_mod_path) {
	sys_FileSystem.createDirectory(mod_assets);
	mikolka_helpers_FileManager.scanDirectory(mod_assets,function(s) {
		sys_FileSystem.createDirectory(haxe_io_Path.join([export_mod_path,haxe_io_Path.directory(s)]));
		sys_io_File.copy("" + mod_assets + "/" + s,haxe_io_Path.join([export_mod_path,s]));
	},function(s) {
	});
};
var mikolka_commands_ProjectTasks = function() { };
mikolka_commands_ProjectTasks.__name__ = true;
mikolka_commands_ProjectTasks.assertTemplateZip = function(template_url) {
	if(!sys_FileSystem.exists("template.zip")) {
		var client = new haxe_http_HttpNodeJs(template_url);
		client.request();
		if(client.responseBytes == null) {
			return false;
		}
		var bytes = client.responseBytes;
		var data = bytes.b;
		js_node_Fs.writeFileSync("template.zip",js_node_buffer_Buffer.from(data.buffer,data.byteOffset,bytes.length));
	}
	return true;
};
mikolka_commands_ProjectTasks.task_setupProject = function(template_url) {
	mikolka_vscode_Interaction.requestInput("Type in the name of the project:",function(name) {
		mikolka_commands_ProjectTasks.makeProject(template_url,name);
	});
};
mikolka_commands_ProjectTasks.makeProject = function(template_url,name) {
	process.stdout.write("Making project...");
	process.stdout.write("\n");
	if(mikolka_commands_ProjectTasks.assertTemplateZip(template_url)) {
		mikolka_helpers_ZipTools.extractZip(new sys_io_FileInput(js_node_Fs.openSync("template.zip","r")),name);
		sys_io_File.copy(__filename,haxe_io_Path.join([name,"compiler.exe"]));
		sys_io_File.copy("funk.cfg",haxe_io_Path.join([name,"funk.cfg"]));
		if(Sys.systemName() == "Linux") {
			js_node_ChildProcess.spawnSync("chmod +x '" + haxe_io_Path.join([name,"compiler.exe"]) + "'",{ shell : true, stdio : "inherit"});
		}
		process.stdout.write("Done!");
		process.stdout.write("\n");
	} else {
		process.stdout.write("Couldn't find the mod template!");
		process.stdout.write("\n");
	}
};
var mikolka_commands_SetupTask = function() { };
mikolka_commands_SetupTask.__name__ = true;
mikolka_commands_SetupTask.task_setupEnvironment = function(template_url) {
	process.stdout.write("[SETUP] Checking git..");
	process.stdout.write("\n");
	if(!mikolka_helpers_Process.checkCommand("git -v")) {
		mikolka_vscode_Interaction.displayError("Git is absent on this system. You can install it from here: https://git-scm.com/");
		return;
	}
	process.stdout.write("[SETUP] Checking haxe..");
	process.stdout.write("\n");
	if(!mikolka_helpers_Process.checkCommand("haxe --version")) {
		mikolka_vscode_Interaction.displayError("You don't have haxe???\nGet it from here: https://haxe.org/download/");
		return;
	}
	process.stdout.write("[SETUP] Checking haxelib..");
	process.stdout.write("\n");
	if(!mikolka_helpers_Process.isPureHaxelib()) {
		mikolka_vscode_Interaction.requestConfirmation("You seem to have non-empty, or absent dependencies folder.\n" + "You can reinstall existing dependencies, or keep them as is.\n" + "Do you want to reinstall? (yes/no): ",function() {
			process.stdout.write("Continuing!");
			process.stdout.write("\n");
			mikolka_commands_SetupTask.installFunkinHaxelibs(template_url);
		},function() {
			mikolka_vscode_Interaction.displayError("Setup aborted!");
		});
	} else {
		mikolka_commands_SetupTask.installFunkinHaxelibs(template_url);
	}
};
mikolka_commands_SetupTask.installFunkinHaxelibs = function(template_url) {
	process.stdout.write("[SETUP] Reading dependencies..");
	process.stdout.write("\n");
	mikolka_commands_SetupTask.runSetupCommand("haxelib git thx.core  https://github.com/fponticelli/thx.core.git 2bf2b992e06159510f595554e6b952e47922f128 --never --skip-dependencies");
	mikolka_commands_SetupTask.runSetupCommand("haxelib git hmm  https://github.com/FunkinCrew/hmm.git --never --skip-dependencies");
	mikolka_commands_SetupTask.runSetupCommand("haxelib git grig.audio  https://gitlab.com/haxe-grig/grig.audio.git 57f5d47f2533fd0c3dcd025a86cb86c0dfa0b6d2 --never --skip-dependencies");
	mikolka_commands_SetupTask.runSetupCommand("haxelib git funkin https://github.com/FunkinCompiler/Funkin-lib.git 786e75e63a4529c99f5e0c4d943805610974c48d --always");
	var haxelib_repo = StringTools.replace(mikolka_helpers_Process.resolveCommand("haxelib config"),"\n","");
	process.stdout.write(Std.string("CWD: " + ("" + haxelib_repo + "funkin/git/")));
	process.stdout.write("\n");
	mikolka_commands_SetupTask.localCwd = "" + haxelib_repo + "funkin/git/";
	mikolka_commands_SetupTask.runSetupCommand("haxelib run hmm reinstall");
	process.stdout.write("[SETUP] Moving dependencies..");
	process.stdout.write("\n");
	var _g = 0;
	var _g1 = js_node_Fs.readdirSync("" + haxelib_repo + "funkin/git/.haxelib/");
	while(_g < _g1.length) {
		var dir = _g1[_g];
		++_g;
		try {
			js_node_Fs.renameSync("" + haxelib_repo + "funkin/git/.haxelib/" + dir,"" + haxelib_repo + dir);
		} catch( _g2 ) {
			console.log("src/mikolka/commands/SetupTask.hx:74:","Move failed: " + haxelib_repo + "funkin/git/.haxelib/" + dir + " -> " + haxelib_repo + dir + "/");
		}
	}
	var grig_dev_file = new sys_io_FileOutput(js_node_Fs.openSync("" + haxelib_repo + ".dev","w"));
	grig_dev_file.writeString("" + haxelib_repo + "grig,audio/git/src");
	grig_dev_file.flush();
	grig_dev_file.close();
	process.stdout.write("[SETUP] Checking mod template..");
	process.stdout.write("\n");
	if(!mikolka_commands_ProjectTasks.assertTemplateZip(template_url)) {
		process.stdout.write("Mod template is missing!");
		process.stdout.write("\n");
	}
	process.stdout.write("[SETUP] Setup done!");
	process.stdout.write("\n");
};
mikolka_commands_SetupTask.runSetupCommand = function(cmd) {
	process.stdout.write(Std.string("   > " + cmd));
	process.stdout.write("\n");
	return mikolka_helpers_Process.checkCommand(cmd,mikolka_commands_SetupTask.localCwd,"Setup step failed");
};
var mikolka_config_FunkCfg = function(cfg_path) {
	if(cfg_path == null) {
		cfg_path = "funk.cfg";
	}
	this.map = mikolka_config_FunkCfg.loadFile(cfg_path);
};
mikolka_config_FunkCfg.__name__ = true;
mikolka_config_FunkCfg.loadFile = function(cfg_path) {
	if(!sys_FileSystem.exists(cfg_path)) {
		process.stdout.write("No config! Creating a new one.");
		process.stdout.write("\n");
		mikolka_config_FunkCfg.saveFile(cfg_path,mikolka_config_FunkCfg.DEFAULT_MAP);
		return mikolka_config_FunkCfg.DEFAULT_MAP;
	}
	var lines = js_node_Fs.readFileSync(cfg_path,{ encoding : "utf8"}).split("\n");
	var map = new haxe_ds_StringMap();
	var _g = 0;
	while(_g < lines.length) {
		var line = lines[_g];
		++_g;
		if(line.indexOf("=") != -1) {
			var seg = line.split("=");
			if(seg.length != 2) {
				process.stdout.write(Std.string("Malfolded line in config: " + line));
				process.stdout.write("\n");
				continue;
			}
			map.h[seg[0]] = seg[1];
		}
	}
	return map;
};
mikolka_config_FunkCfg.saveFile = function(cfg_path,map) {
	var text = "";
	var h = map.h;
	var x_keys = Object.keys(h);
	var x_length = x_keys.length;
	var x_current = 0;
	while(x_current < x_length) {
		var key = x_keys[x_current++];
		text += key + "=" + h[key] + "\n";
	}
	js_node_Fs.writeFileSync(cfg_path,text);
};
mikolka_config_FunkCfg.prototype = {
	getKey: function(key) {
		if(!Object.prototype.hasOwnProperty.call(this.map.h,key)) {
			return mikolka_config_FunkCfg.DEFAULT_MAP.h[key];
		}
		return this.map.h[key];
	}
	,get_GAME_PATH: function() {
		return this.getKey("game_path");
	}
	,get_GAME_MOD_NAME: function() {
		return this.getKey("game_mod_name");
	}
	,get_MOD_FNFC_FOLDER: function() {
		return this.getKey("mod_fnfc_folder");
	}
	,get_MOD_HX_FOLDER: function() {
		return this.getKey("mod_hx_folder");
	}
	,get_MOD_CONTENT_FOLDER: function() {
		return this.getKey("mod_content_folder");
	}
	,get_TEMPLATE_REMOTE_SRC: function() {
		return this.getKey("template_remote_src");
	}
};
var mikolka_helpers_FileManager = function() { };
mikolka_helpers_FileManager.__name__ = true;
mikolka_helpers_FileManager.deleteDirRecursively = function(path) {
	mikolka_helpers_FileManager.scanDirectory(path,function(s) {
		js_node_Fs.unlinkSync(haxe_io_Path.join([path,s]));
	},function(s) {
		var path1 = haxe_io_Path.join([path,s]);
		if(sys_FileSystem.exists(path1)) {
			var _g = 0;
			var _g1 = js_node_Fs.readdirSync(path1);
			while(_g < _g1.length) {
				var curPath = path1 + "/" + _g1[_g++];
				if(sys_FileSystem.isDirectory(curPath)) {
					if(sys_FileSystem.exists(curPath)) {
						var _g2 = 0;
						var _g3 = js_node_Fs.readdirSync(curPath);
						while(_g2 < _g3.length) {
							var curPath1 = curPath + "/" + _g3[_g2++];
							if(sys_FileSystem.isDirectory(curPath1)) {
								sys_FileSystem.deleteDirectory(curPath1);
							} else {
								js_node_Fs.unlinkSync(curPath1);
							}
						}
						js_node_Fs.rmdirSync(curPath);
					}
				} else {
					js_node_Fs.unlinkSync(curPath);
				}
			}
			js_node_Fs.rmdirSync(path1);
		}
	});
};
mikolka_helpers_FileManager.isManifestPresent = function(modAssetsDir) {
	if(!sys_FileSystem.exists("" + modAssetsDir + "/_polymod_meta.json")) {
		return false;
	}
	return true;
};
mikolka_helpers_FileManager.scanDirectory = function(prefix,onFile,onDir,path) {
	if(path == null) {
		path = "";
	}
	var fullPath = haxe_io_Path.join([prefix,path]);
	if(sys_FileSystem.exists(fullPath) && sys_FileSystem.isDirectory(fullPath)) {
		var entries = js_node_Fs.readdirSync(fullPath);
		var _g = 0;
		while(_g < entries.length) {
			var entry = entries[_g];
			++_g;
			if(sys_FileSystem.isDirectory(fullPath + "/" + entry)) {
				mikolka_helpers_FileManager.scanDirectory(prefix,onFile,onDir,path + "/" + entry);
				onDir(path + "/" + entry);
			} else {
				onFile(path + "/" + entry);
			}
		}
	}
};
mikolka_helpers_FileManager.safelyCopyFile = function(from,to) {
	sys_FileSystem.createDirectory(haxe_io_Path.directory(to));
	sys_io_File.copy(from,to);
};
mikolka_helpers_FileManager.getProjectPath = function(target) {
	if(Vscode.workspace.workspaceFolders.length == 0) {
		return null;
	}
	return haxe_io_Path.join([Vscode.workspace.workspaceFolders[0].uri.fsPath,target]);
};
mikolka_helpers_FileManager.doesTargetExist = function(target) {
	var path = mikolka_helpers_FileManager.getProjectPath(target);
	if(path != null) {
		return sys_FileSystem.exists(path);
	} else {
		return false;
	}
};
var mikolka_helpers_LangStrings = function() { };
mikolka_helpers_LangStrings.__name__ = true;
mikolka_helpers_LangStrings.FNFC_INVALID_FILE = function(file_path) {
	return "[WARN] " + file_path + " is not a valid chart file. Ignoring!";
};
mikolka_helpers_LangStrings.FNFC_INVALID_MANIFEST = function(file_path) {
	return "File " + file_path + " doesn't contain a valid \"manifest.json\" file";
};
mikolka_helpers_LangStrings.FNFC_INVALID_MANIFEST_SONG_ID = function(file_path) {
	return "It seems like \"manifest.json\" in " + file_path + " is missing a \"songId\" attribute...";
};
var mikolka_helpers_Process = function() { };
mikolka_helpers_Process.__name__ = true;
mikolka_helpers_Process.spawnProcess = function(cmd,cwd,onExit) {
	process.stdout.write(Std.string(cwd + " >>> " + cmd));
	process.stdout.write("\n");
	var proc = js_node_ChildProcess.spawn(cmd,null,{ cwd : cwd, stdio : "pipe", shell : true});
	proc.stdout.on("data",function(data) {
		Vscode.debug.activeDebugConsole.append(data.toString("utf-8"));
	});
	proc.stderr.on("data",function(data) {
		Vscode.debug.activeDebugConsole.append(data.toString("utf-8"));
	});
	proc.on("exit",function(errorCode,_) {
		if(errorCode == null) {
			mikolka_vscode_Interaction.displayError("Fatality occurred while running the game!");
			onExit(-1000);
		} else {
			onExit(errorCode);
		}
	});
	return proc;
};
mikolka_helpers_Process.spawnFunkinGame = function(cwd,execName,cmd_prefix) {
	if(cmd_prefix == null) {
		cmd_prefix = "";
	}
	mikolka_helpers_Process.spawnProcess("" + cmd_prefix + " ./" + execName,cwd,function(code) {
		mikolka_vscode_Interaction.displayError("FUnkin' exited with code: " + code);
		if(code != 0) {
			mikolka_vscode_Interaction.displayError("FUnkin' exited with code: " + code);
		}
	});
};
mikolka_helpers_Process.checkCommand = function(execName,cwd,errTitle) {
	if(errTitle == null) {
		errTitle = "Error checking command";
	}
	var proc = js_node_ChildProcess.spawnSync(execName,{ cwd : cwd});
	var code = proc.status;
	if(code != 0) {
		mikolka_vscode_Interaction.displayErrorAlert(errTitle,proc.output.toString());
	}
	return code == 0;
};
mikolka_helpers_Process.isPureHaxelib = function() {
	var proc = js_node_ChildProcess.spawnSync("haxelib list");
	if(proc.status == 0) {
		return Std.string(proc.stdout).length == 0;
	} else {
		return false;
	}
};
mikolka_helpers_Process.resolveCommand = function(command) {
	process.stdout.write(Std.string("*>> " + command));
	process.stdout.write("\n");
	var proc = js_node_ChildProcess.spawnSync(command);
	return proc.stdout;
};
var mikolka_helpers_ZipTools = function() { };
mikolka_helpers_ZipTools.__name__ = true;
mikolka_helpers_ZipTools.makeZipArchive = function(target_to_archive,result_out) {
	var zip = new haxe_zip_Writer(result_out);
	var nodes = mikolka_helpers_ZipTools.getZipFileEntries(target_to_archive);
	nodes.add(mikolka_helpers_ZipTools.createIgnoreNode());
	zip.write(nodes);
};
mikolka_helpers_ZipTools.getZipFileEntries = function(dir,entries,inDir) {
	if(entries == null) {
		entries = new haxe_ds_List();
	}
	if(inDir == null) {
		inDir = dir;
	}
	mikolka_helpers_FileManager.scanDirectory(dir,function(s) {
		var path = haxe_io_Path.join([dir,s]);
		var bytes = haxe_io_Bytes.ofData(js_node_buffer__$Buffer_Helper.bytesOfBuffer(js_node_Fs.readFileSync(path)).b.bufferValue);
		var entry = { fileName : StringTools.replace(path,inDir,""), fileSize : bytes.length, fileTime : new Date(), compressed : false, dataSize : js_node_Fs.statSync(path).size, data : bytes, crc32 : haxe_crypto_Crc32.make(bytes)};
		entries.push(entry);
	},function(s) {
	});
	return entries;
};
mikolka_helpers_ZipTools.extractZip = function(file,target) {
	var zip = haxe_zip_Reader.readZip(file);
	sys_FileSystem.createDirectory(target);
	var _g_head = zip.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		if(val.crc32 == null || val.crc32 == 0) {
			sys_FileSystem.createDirectory(haxe_io_Path.join([target,val.fileName]));
		} else {
			haxe_zip_Tools.uncompress(val);
			var path = haxe_io_Path.join([target,val.fileName]);
			var bytes = val.data;
			var data = bytes.b;
			js_node_Fs.writeFileSync(path,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,bytes.length));
		}
	}
};
mikolka_helpers_ZipTools.createIgnoreNode = function() {
	return { fileName : ".disable_gb1click", fileSize : 0, fileTime : new Date(), compressed : false, dataSize : 0, data : new haxe_io_Bytes(new ArrayBuffer(0)), crc32 : haxe_crypto_Crc32.make(new haxe_io_Bytes(new ArrayBuffer(0)))};
};
var mikolka_programs_Fnfc = function(fnfc_path,mod_export_path) {
	this.path = fnfc_path;
	this.mod_export_path = mod_export_path;
};
mikolka_programs_Fnfc.__name__ = true;
mikolka_programs_Fnfc.prototype = {
	processDirectory: function() {
		mikolka_helpers_FileManager.scanDirectory(this.path,$bind(this,this.processFile),function(s) {
		});
	}
	,processFile: function(file_path) {
		if(!StringTools.endsWith(file_path,".fnfc")) {
			console.log("src/mikolka/programs/Fnfc.hx:25:","[WARN] " + file_path + " is not a valid chart file. Ignoring!");
			return;
		}
		var zip = haxe_zip_Reader.readZip(new sys_io_FileInput(js_node_Fs.openSync(haxe_io_Path.join([this.path,file_path]),"r")));
		console.log("src/mikolka/programs/Fnfc.hx:29:",HxOverrides.substr(file_path,1,null));
		var fnfc_manifestList = zip.filter(function(s) {
			return s.fileName == "manifest.json";
		});
		if(fnfc_manifestList.length != 1) {
			mikolka_vscode_Interaction.displayError("File " + file_path + " doesn't contain a valid \"manifest.json\" file");
			return;
		}
		var fnfc_manifest = fnfc_manifestList.first().data.toString();
		var varGetter = new EReg("\"songId\": *\"(.+)\" *","i");
		if(!varGetter.match(fnfc_manifest)) {
			mikolka_vscode_Interaction.displayError("It seems like \"manifest.json\" in " + file_path + " is missing a \"songId\" attribute...");
			return;
		}
		var songId = varGetter.matched(1);
		var _g_head = zip.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var target_File = "";
			if(StringTools.endsWith(val.fileName,".json")) {
				target_File = haxe_io_Path.join([this.mod_export_path,"data/songs",songId,val.fileName]);
			} else if(StringTools.endsWith(val.fileName,".ogg")) {
				target_File = haxe_io_Path.join([this.mod_export_path,"songs",songId,val.fileName]);
			} else {
				console.log("src/mikolka/programs/Fnfc.hx:58:","[WARN] file " + val.fileName + " is not known to be valid. Ignoring!");
				continue;
			}
			sys_FileSystem.createDirectory(haxe_io_Path.directory(target_File));
			var bytes = val.data;
			var data = bytes.b;
			js_node_Fs.writeFileSync(target_File,js_node_buffer_Buffer.from(data.buffer,data.byteOffset,bytes.length));
		}
	}
};
var mikolka_programs_Hxc = function(src_path,mod_export_path) {
	this.src_path = src_path;
	this.mod_export_path = mod_export_path;
};
mikolka_programs_Hxc.__name__ = true;
mikolka_programs_Hxc.prototype = {
	processDirectory: function() {
		mikolka_helpers_FileManager.scanDirectory(this.src_path,$bind(this,this.processFile),function(s) {
		});
	}
	,processFile: function(file_name) {
		var shard = haxe_io_Path.join([this.src_path,file_name]);
		var filter = new EReg("package ([a-z.]+) *;","i");
		var content = js_node_Fs.readFileSync(shard,{ encoding : "utf8"});
		if(!filter.match(content)) {
			mikolka_vscode_Interaction.displayError("File " + shard + " is missing \"package\" line");
			return;
		}
		var result = mikolka_programs_Hxc.stripPackage ? content.replace(filter.r,"") : content;
		if(mikolka_programs_Hxc.convertCasts) {
			var _this_r = new RegExp("cast *\\((.*),.*\\)","g".split("u").join(""));
			result = result.replace(_this_r,"$1");
		}
		if(mikolka_programs_Hxc.convertImports) {
			var _this_r = new RegExp("import +([a-zA-z.]*)\\.[A-Z]\\w+\\.([A-Z]\\w+);","g".split("u").join(""));
			result = result.replace(_this_r,"import $1.$2;");
		}
		if(mikolka_programs_Hxc.mockPolymodCalls) {
			var _this_r = new RegExp("\\.polymodExecFunc *\\((.*),(\\W*\\[.*\\]\\W*)\\)","g".split("u").join(""));
			result = result.replace(_this_r,".scriptCall($1,$2)");
		}
		var filePackage = filter.matched(1).split(".");
		filePackage[0] = haxe_io_Path.join([this.mod_export_path,"scripts"]);
		var targetDir = haxe_io_Path.join(filePackage);
		sys_FileSystem.createDirectory(targetDir);
		console.log("src/mikolka/programs/Hxc.hx:58:",HxOverrides.substr(file_name,1,null));
		js_node_Fs.writeFileSync(haxe_io_Path.join([targetDir,haxe_io_Path.withoutDirectory(file_name) + "c"]),result);
	}
};
var mikolka_vscode_CommandRegistry = function() { };
mikolka_vscode_CommandRegistry.__name__ = true;
mikolka_vscode_CommandRegistry.makeCommand = function(name,context,action) {
	context.subscriptions.push(Vscode.commands.registerCommand("mikolka." + name,action));
};
mikolka_vscode_CommandRegistry.registerCommands = function(context) {
	var cfg = Main.projectConfig;
	mikolka_vscode_CommandRegistry.makeCommand("setup",context,function() {
		mikolka_commands_SetupTask.task_setupEnvironment(cfg.get_TEMPLATE_REMOTE_SRC());
	});
	mikolka_vscode_CommandRegistry.makeCommand("new",context,function() {
		mikolka_commands_ProjectTasks.task_setupProject(cfg.get_TEMPLATE_REMOTE_SRC());
	});
	mikolka_vscode_CommandRegistry.makeCommand("just-run",context,function() {
		mikolka_commands_CompileTasks.Task_RunGame(cfg.get_GAME_PATH());
	});
	mikolka_vscode_CommandRegistry.makeCommand("just-compile",context,function() {
		mikolka_commands_CompileTasks.Task_CompileGame(cfg.get_MOD_CONTENT_FOLDER(),cfg.get_MOD_HX_FOLDER(),cfg.get_MOD_FNFC_FOLDER(),cfg.get_GAME_PATH() + "/mods/" + cfg.get_GAME_MOD_NAME());
		console.log("src/mikolka/vscode/ComandRegistry.hx:24:","Done!");
	});
	mikolka_vscode_CommandRegistry.makeCommand("run",context,function() {
		mikolka_commands_CompileTasks.Task_CompileGame(cfg.get_MOD_CONTENT_FOLDER(),cfg.get_MOD_HX_FOLDER(),cfg.get_MOD_FNFC_FOLDER(),cfg.get_GAME_PATH() + "/mods/" + cfg.get_GAME_MOD_NAME());
		mikolka_commands_CompileTasks.Task_RunGame(cfg.get_GAME_PATH());
	});
	mikolka_vscode_CommandRegistry.makeCommand("export",context,function() {
		mikolka_commands_CompileTasks.Task_ExportGame(cfg.get_MOD_CONTENT_FOLDER(),cfg.get_MOD_HX_FOLDER(),cfg.get_MOD_FNFC_FOLDER(),cfg.get_GAME_PATH() + "/mods/" + cfg.get_GAME_MOD_NAME());
		console.log("src/mikolka/vscode/ComandRegistry.hx:32:","Done!");
	});
};
var mikolka_vscode_Interaction = function() { };
mikolka_vscode_Interaction.__name__ = true;
mikolka_vscode_Interaction.displayError = function(msg) {
	Vscode.window.showErrorMessage(msg);
};
mikolka_vscode_Interaction.displayErrorAlert = function(title,message) {
	Vscode.window.showErrorMessage(title,{ modal : true, detail : message});
};
mikolka_vscode_Interaction.requestInput = function(prompt,next) {
	Vscode.window.showInputBox({ title : prompt}).then(next,function(out) {
		mikolka_vscode_Interaction.displayError("Action canceled!");
	});
};
mikolka_vscode_Interaction.requestConfirmation = function(prompt,onYes,onNo) {
	Vscode.window.showWarningMessage(prompt,"Yes","No").then(function(result) {
		if(result == "Yes") {
			onYes();
		} else if(result == "No") {
			onNo();
		} else {
			mikolka_vscode_Interaction.displayError("Action aborted!");
		}
	});
};
mikolka_vscode_Interaction.showPressToContinue = function(prompt) {
	if(prompt == null) {
		prompt = "[FIXME] Press any key to continue";
	}
	Vscode.window.showWarningMessage(prompt);
};
var sys_FileSystem = function() { };
sys_FileSystem.__name__ = true;
sys_FileSystem.exists = function(path) {
	try {
		js_node_Fs.accessSync(path);
		return true;
	} catch( _g ) {
		return false;
	}
};
sys_FileSystem.isDirectory = function(path) {
	try {
		return js_node_Fs.statSync(path).isDirectory();
	} catch( _g ) {
		return false;
	}
};
sys_FileSystem.createDirectory = function(path) {
	try {
		js_node_Fs.mkdirSync(path);
	} catch( _g ) {
		var _g1 = haxe_Exception.caught(_g).unwrap();
		if(_g1.code == "ENOENT") {
			sys_FileSystem.createDirectory(js_node_Path.dirname(path));
			js_node_Fs.mkdirSync(path);
		} else {
			var stat;
			try {
				stat = js_node_Fs.statSync(path);
			} catch( _g2 ) {
				throw _g1;
			}
			if(!stat.isDirectory()) {
				throw _g1;
			}
		}
	}
};
sys_FileSystem.deleteDirectory = function(path) {
	if(sys_FileSystem.exists(path)) {
		var _g = 0;
		var _g1 = js_node_Fs.readdirSync(path);
		while(_g < _g1.length) {
			var curPath = path + "/" + _g1[_g++];
			if(sys_FileSystem.isDirectory(curPath)) {
				sys_FileSystem.deleteDirectory(curPath);
			} else {
				js_node_Fs.unlinkSync(curPath);
			}
		}
		js_node_Fs.rmdirSync(path);
	}
};
var sys_io_File = function() { };
sys_io_File.__name__ = true;
sys_io_File.copy = function(srcPath,dstPath) {
	var src = js_node_Fs.openSync(srcPath,"r");
	var stat = js_node_Fs.fstatSync(src);
	var dst = js_node_Fs.openSync(dstPath,"w",stat.mode);
	var bytesRead;
	var pos = 0;
	while(true) {
		bytesRead = js_node_Fs.readSync(src,sys_io_File.copyBuf,0,65536,pos);
		if(!(bytesRead > 0)) {
			break;
		}
		js_node_Fs.writeSync(dst,sys_io_File.copyBuf,0,bytesRead);
		pos += bytesRead;
	}
	js_node_Fs.closeSync(src);
	js_node_Fs.closeSync(dst);
};
var sys_io_FileInput = function(fd) {
	this.hasReachedEof = false;
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileInput.__name__ = true;
sys_io_FileInput.__super__ = haxe_io_Input;
sys_io_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	throwEof: function() {
		this.hasReachedEof = true;
		throw haxe_Exception.thrown(new haxe_io_Eof());
	}
	,readByte: function() {
		var buf = js_node_buffer_Buffer.alloc(1);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				this.hasReachedEof = true;
				throw haxe_Exception.thrown(new haxe_io_Eof());
			}
			throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
		}
		if(bytesRead == 0) {
			this.hasReachedEof = true;
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	,readBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(_g1.code == "EOF") {
				this.hasReachedEof = true;
				throw haxe_Exception.thrown(new haxe_io_Eof());
			}
			throw haxe_Exception.thrown(haxe_io_Error.Custom(_g1));
		}
		if(bytesRead == 0) {
			this.hasReachedEof = true;
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		this.hasReachedEof = false;
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
	,eof: function() {
		return this.hasReachedEof;
	}
});
var sys_io_FileOutput = function(fd) {
	this.fd = fd;
	this.pos = 0;
};
sys_io_FileOutput.__name__ = true;
sys_io_FileOutput.__super__ = haxe_io_Output;
sys_io_FileOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeByte: function(b) {
		var buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	,writeBytes: function(s,pos,len) {
		var data = s.b;
		var buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		var wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	,close: function() {
		js_node_Fs.closeSync(this.fd);
	}
	,seek: function(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	,tell: function() {
		return this.pos;
	}
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__:true,__constructs__:null
	,SeekBegin: {_hx_name:"SeekBegin",_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_name:"SeekCur",_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_name:"SeekEnd",_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
sys_io_FileSeek.__constructs__ = [sys_io_FileSeek.SeekBegin,sys_io_FileSeek.SeekCur,sys_io_FileSeek.SeekEnd];
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
mikolka_commands_SetupTask.localCwd = "";
mikolka_config_FunkCfg.DEFAULT_MAP = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h["game_path"] = "../funkinGame";
	_g.h["game_mod_name"] = "workbench";
	_g.h["mod_fnfc_folder"] = "fnfc_files";
	_g.h["mod_hx_folder"] = "source/mod/";
	_g.h["mod_content_folder"] = "mod_base";
	_g.h["template_remote_src"] = "https://raw.githubusercontent.com/FunkinCompiler/template-binaries/refs/heads/main/0.6.3.zip";
	$r = _g;
	return $r;
}(this));
mikolka_helpers_LangStrings.MSG_EXPORT_ZIP_NAME = "Type in a name for your exported file (without .zip):";
mikolka_helpers_LangStrings.MSG_EXPORT_META_MISSING = "Your mod doesn't contain \"_polymod_meta.json\". Please create a valid metadata file for this mod first!";
mikolka_helpers_LangStrings.MSG_EXPORT_META_NO_VERSION = "It seems like your \"_polymod_meta.json\" is missing a \"mod_version\" attribute...";
mikolka_helpers_LangStrings.MSG_EXPORT_MOD_VERSION = "What version number should be used for this mod version? Leave blank to use the current one";
mikolka_helpers_LangStrings.MSG_SETUP_CHECKING_GIT = "[SETUP] Checking git..";
mikolka_helpers_LangStrings.MSG_SETUP_CHECKING_HAXE = "[SETUP] Checking haxe..";
mikolka_helpers_LangStrings.SETUP_GIT_ERROR = "Git is absent on this system. You can install it from here: https://git-scm.com/";
mikolka_helpers_LangStrings.SETUP_HAXE_ERROR = "You don't have haxe???\nGet it from here: https://haxe.org/download/";
mikolka_helpers_LangStrings.SETUP_HAXELIB_ERROR = "You seem to have non-empty, or absent dependencies folder.\n" + "You can reinstall existing dependencies, or keep them as is.\n" + "Do you want to reinstall? (yes/no): ";
mikolka_helpers_LangStrings.PROJECT_NAME_PROMPT = "Type in the name of the project:";
mikolka_programs_Hxc.stripPackage = true;
mikolka_programs_Hxc.convertCasts = true;
mikolka_programs_Hxc.convertImports = true;
mikolka_programs_Hxc.mockPolymodCalls = true;
sys_io_File.copyBuf = js_node_buffer_Buffer.alloc(65536);
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
